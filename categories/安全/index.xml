<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全 on 笑的心酸</title><link>https://www.bigcry.asia/categories/%E5%AE%89%E5%85%A8/</link><description>Recent content in 安全 on 笑的心酸</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 04 Mar 2022 17:12:47 +0000</lastBuildDate><atom:link href="https://www.bigcry.asia/categories/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>记一次被迫反编译加中间人攻击</title><link>https://www.bigcry.asia/p/114514/</link><pubDate>Fri, 04 Mar 2022 17:12:47 +0000</pubDate><guid>https://www.bigcry.asia/p/114514/</guid><description>&lt;h1 id="0x00-事件起因">0x00 事件起因&lt;/h1>
&lt;p>最近在搞毕设，其中有一个模块需要用到人脸识别服务，遂去网上寻找现成的轮子，终于在某慕课平台上发现了一款简单的人脸识别框架，其使用cython编写并编译成C代码，借助Flask框架实现Web服务。下载运行的过程此处不多细说。&lt;/p>
&lt;p>运行十分顺利，docker一键部署即可，结果在调用其生成的服务接口时出现问题，其应返回一串由python生成的人脸模型字符串，结果他给我返回了个&lt;code>icode不正确&lt;/code>，经查询发现，其还需要向慕课后台传递一串随机&lt;code>code&lt;/code>，此code只有购买该课程的人才能生成并有时效性，奈何本人囊中羞涩，实在付不起昂贵的课程费用，于是动起了小心思。&lt;/p>
&lt;h1 id="0x01-返本溯源">0x01 返本溯源&lt;/h1>
&lt;p>既然我都有了该人脸识别程序，为何不从其源码入手呢，所以打开下载的源码包，结果发现是一个由&lt;code>cython&lt;/code>编译生成的C文件与一个编译生成的&lt;code>SO&lt;/code>二进制文件，打开c文件，由python编译后的c代码属实是晦涩难懂，不过经过层层分析，还是找到了相应的检查code代码，但是却无从下手，因为编译后的代码是这样的&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304172837229.png"
loading="lazy"
alt="image-20220304172837229"
>&lt;/p>
&lt;p>我透，这尼玛怎么改，直接放弃！&lt;/p>
&lt;h1 id="0x02-偷天换日">0x02 偷天换日&lt;/h1>
&lt;p>虽然无法修改，但是依然发现了一个值得注意的点，就是提交的这个code会在服务内请求某慕课服务器做验证，根据返回值再次验证，最后在返回给我们，既然如此，我们拦截这个验证code的请求，然后修改它的响应包不就可以了，由于该服务运行在&lt;code>linux&lt;/code>上，所以需要寻找一个适用于linux，并且能够自动监听指定URL，自动修改响应包的一个软件，毕竟我没有功夫每一次请求都自己手动修改。于是，&lt;code>mitmproxy&lt;/code>出现了&lt;/p>
&lt;blockquote>
&lt;p>顾名思义，mitmproxy 就是用于 MITM 的 proxy，MITM 即&lt;a class="link" href="https://zh.wikipedia.org/wiki/%e4%b8%ad%e9%97%b4%e4%ba%ba%e6%94%bb%e5%87%bb" target="_blank" rel="noopener"
>中间人攻击&lt;/a>（Man-in-the-middle attack）。用于中间人攻击的代理首先会向正常的代理一样转发请求，保障服务端与客户端的通信，其次，会适时的查、记录其截获的数据，或篡改数据，引发服务端或客户端特定的行为。&lt;/p>
&lt;p>不同于 fiddler 或 wireshark 等抓包工具，mitmproxy 不仅可以截获请求帮助开发者查看、分析，更可以通过自定义脚本进行二次开发。举例来说，利用 fiddler 可以过滤出浏览器对某个特定 url 的请求，并查看、分析其数据，但实现不了高度定制化的需求，类似于：“截获对浏览器对该 url 的请求，将返回内容置空，并将真实的返回内容存到某个数据库，出现异常时发出邮件通知”。而对于 mitmproxy，这样的需求可以通过载入自定义 python 脚本轻松实现。&lt;/p>
&lt;/blockquote>
&lt;p>没错，它可以运行自己写的python脚本实现自动化抓包改包，直接上手使用，具体安装教程可以查看官方文档，需要注意的是如果拦截&lt;code>https&lt;/code>请求需要安装认证证书，我在这里说一下ubuntu/Debian的安装方法&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在以下位置为额外的 CA 证书创建一个目录&lt;code>/usr/local/share/ca-certificates&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo mkdir /usr/local/share/ca-certificates/extra
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>首先将&lt;code>mitmproxy&lt;/code>自带的.&lt;strong>pem&lt;/strong>文件转换为&lt;code>.crt&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pem文件在~/.mitmproxy文件夹内，后缀名为.pem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">openssl x509 -in foo.pem -inform PEM -out foo.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将 CA&lt;code>.crt&lt;/code>文件复制到此目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo cp foo.crt /usr/local/share/ca-certificates/extra/foo.crt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>让 Ubuntu 添加相对于的文件&lt;code>.crt&lt;/code>路径：&lt;code>/usr/local/share/ca-certificates``/etc/ca-certificates.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo dpkg-reconfigure ca-certificates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 要以非交互方式执行此操作，请运行：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-ca-certificates
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>这样下来，就安装好了证书，然后简单的写一个脚本文件（直接把官方示例脚本修改修改完事）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">mitmproxy.http&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">mitmproxy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ctx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Counter&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mitmproxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HTTPFlow&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mitmproxy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">HTTPFlow&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;XXX.com&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dumps&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;msg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;success&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;success&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">}))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data = &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">addons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Counter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后修改系统代理为&lt;code>127.0.0.1:8080&lt;/code>，输入&lt;code>mitmdump -s test.py&lt;/code>命令启动，使用curl命令简单测一下，非常ok&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175353190.png"
loading="lazy"
alt="image-20220304175353190"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175310498.png"
loading="lazy"
alt="image-20220304175310498"
>&lt;/p>
&lt;p>可以看到日志输出，已经成功拦截并修改响应了，直接上实机运行！&lt;/p>
&lt;h1 id="0x03-攻营拔寨">0x03 攻营拔寨&lt;/h1>
&lt;p>前端发起请求，后端处理请求，嗯？怎么返回了500，看一看日志输出&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175637550.png"
loading="lazy"
alt="image-20220304175637550"
>&lt;/p>
&lt;p>我好不容易动心一次，你却让我输的如此彻底！焯！！&lt;/p>
&lt;p>明明已经配置好了CA证书，curl命令请求https的域名也通过了，为什么到这里却失败了呢，继续查看源代码，忽然想起这是由python编译而来的C代码，运行也是由python3运行，会不会是python内部出了问题，于是百度一下后，发现果然，因为有代理的存在，所以python的request库还需要一步CA认证，解决方法就是关掉代理，焯！这不是绕了一圈又回到原点了嘛。既然拦截和源码都靠不住，我就盯上了它的运行文件&lt;code>xx.so&lt;/code>，他是由cython编译生成的so文件库，主要运行就是运行它，直接记事本打开，好嘛，直接乱码，百度了一下知道了他是二进制文件，那么就使用对二进制宝器&amp;mdash;&lt;code>IDA&lt;/code>，直接反编译so文件，修改内部参数不就可以了。&lt;/p>
&lt;p>使用IDA打开so文件，找到其中的请求地址，然后修改它，将https请求修改为http请求，万幸他没有做跳转，http请求正常使用&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180406016.png"
loading="lazy"
alt="image-20220304180406016"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180517271.png"
loading="lazy"
alt="image-20220304180517271"
>&lt;/p>
&lt;p>再次实机运行，一切完美&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180643723.png"
loading="lazy"
alt="image-20220304180643723"
>&lt;/p>
&lt;h1 id="0x04-end">0x04 END&lt;/h1>
&lt;p>其实最后都可以修改内部参数，完全可以将请求的路径修改为本地路径，本地在搭建个小服务器返回正确的响应就好，一些软件的破解也是这么做的，或者修改其中验证code函数的返回值都i是可以的。为了搞这个服务，把好多年扔下的反编译老底都掏出来了，还是希望有能力的人可以支持正版，支持他人的劳动成果吧！&lt;/p></description></item></channel></rss>