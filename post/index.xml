<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 笑的心酸</title><link>https://mnmnmssd.github.io/post/</link><description>Recent content in Posts on 笑的心酸</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 17 Mar 2023 16:55:36 +0800</lastBuildDate><atom:link href="https://mnmnmssd.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringDay02</title><link>https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0-02/</link><pubDate>Fri, 17 Mar 2023 16:55:36 +0800</pubDate><guid>https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0-02/</guid><description>&lt;h1 id="基于xml的bean配置">基于XML的Bean配置&lt;/h1>
&lt;h2 id="基础属性">基础属性&lt;/h2>
&lt;h3 id="beanname与别名">BeanName与别名&lt;/h3>
&lt;p>bean标签除了id属性指定唯一标识外，还允许使用name属性指定多个别名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userDao&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;aaa,bbb,ccc&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.Dao.impl.userDaoImpl&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时，除了使用userDao可以获取Bean之外，还可以使用aaa、bbb、ccc来获取，此时这些别名都将保存在单例池中的别名集合中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UserDao&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;aaa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679046389_image-20230317174627405.png"
loading="lazy"
alt="image-20230317174627405"
>&lt;/p>
&lt;p>假如在声明时并未指定id、name属性，那么此时通过类路径也就是class属性中的内容来获取，除此以外，也可以直接通过类型匹配来获取&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//通过类路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UserDao&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.Dao.impl.userDaoImpl&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//通过类型匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">UserDao&lt;/span> &lt;span class="n">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="bean的作用范围">Bean的作用范围&lt;/h3>
&lt;p>初始引入&lt;code>spring-context&lt;/code>包时，Bean的作用范围只有两个，分别为&lt;code>singleton(单例)&lt;/code>与&lt;code>prototype(原型)&lt;/code>&lt;/p>
&lt;h4 id="singleton单例">singleton(单例)&lt;/h4>
&lt;p>顾名思义，在整个Bean的生命周期内，只会产生一个实例化对象，每次使用getBean都获取的是同一个对象，这也是spring默认的Bean作用域。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UserService&lt;/span> &lt;span class="n">userService2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679048574_image-20230317182250723.png"
loading="lazy"
alt="image-20230317182250723"
>&lt;/p>
&lt;h4 id="prototype原型">prototype(原型)&lt;/h4>
&lt;p>其表示一个Bean对应多个实例对象，并且在读取配置文件时并不会创建Bean对象，而是在每次使用getBean方法获取Bean实例时才会创建，并且每次getBean都会创建并返回一个新的Bean对象。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679048756_image-20230317182555421.png"
loading="lazy"
alt="image-20230317182555421"
>&lt;/p>
&lt;h3 id="bean的延迟加载">Bean的延迟加载&lt;/h3>
&lt;p>如果使用的是BeanFactory方式创建bean对象时，Bean是在使用getBean方法时实例化，而在使用ApplicationContext方式创建时，Bean是在读取配置文件时实例化，通过&lt;code>lazy-init&lt;/code>属性则可以控制这一过程。其取值有&lt;code>default&lt;/code>、&lt;code>false&lt;/code>与&lt;code>true&lt;/code>三种。&lt;/p>
&lt;p>延迟加载只能修改ApplicationContext方式，对BeanFactory方式不起效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">bean&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="n">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.service.impl.UserServiceImpl&amp;#34;&lt;/span> &lt;span class="n">lazy&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行后，调试发现在读取配置文件时并没有实例化对象和存入单例池。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679049851_image-20230317184410698.png"
loading="lazy"
alt="image-20230317184410698"
>&lt;/p>
&lt;p>只有当调用getBean方法时，才会实例化并放入单例池。&lt;/p>
&lt;h3 id="初始化方法和销毁方法">初始化方法和销毁方法&lt;/h3>
&lt;p>Spring支持在Bean实例化时执行一些初始方法，并在其销毁前执行销毁方法，使用&lt;code>init-method&lt;/code>与&lt;code>destroy-method&lt;/code>属性来指定执行的方法名称。&lt;/p>
&lt;p>在UserServiceImpl类中我们添加两个方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="nf">UserServiceImpl&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;无参构造执行...&amp;#34;&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;init方法执行...&amp;#34;&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">destroy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;destroy方法执行...&amp;#34;&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在xml配置文件中，我们使用&lt;code>init-method&lt;/code>与&lt;code>destroy-method&lt;/code>属性来指定方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.service.impl.UserServiceImpl&amp;#34;&lt;/span> &lt;span class="na">init-method=&lt;/span>&lt;span class="s">&amp;#34;init&amp;#34;&lt;/span> &lt;span class="na">destroy-method=&lt;/span>&lt;span class="s">&amp;#34;destroy&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行后可以看到以下输出：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679050297_image-20230317185136006.png"
loading="lazy"
alt="image-20230317185136006"
>&lt;/p>
&lt;p>在结果中我们可以得知init方法是在构造方法之后才会执行，并且并没有输出销毁方法。这是为什么呢，这是因为程序并没有显式的关闭，而是自动停止运行，就好像突然停电，电脑内的一部分数据都没来得及进行保存。所以我们要显式的关闭才会执行销毁方法。&lt;/p>
&lt;p>修改main方法中的代码，由于ApplicationContext并没有声明显式关闭方法，所以我们直接使用它的接口实现类&lt;code>ClassPathXmlApplicationContext&lt;/code>中的&lt;code>close&lt;/code>方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ClassPathXmlApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassPathXmlApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;applicationContext.xml&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行后就可以看到以下输出&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679050604_image-20230317185641804.png"
loading="lazy"
alt="image-20230317185641804"
>&lt;/p>
&lt;h3 id="initializingbean方法初始化">initializingBean方法初始化&lt;/h3>
&lt;p>除了使用&lt;code>init-method&lt;/code>属性指定初始化方法外，Spring还允许对象通过实现&lt;code>InitializingBean&lt;/code>接口中的&lt;code>afterPropertiesSet&lt;/code>方法来进行初始化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserServiceImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">UserService&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">InitializingBean&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...其他方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterPropertiesSet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;afterPropertiesSet方法执行....&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行后可以有以下输出：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679051623_image-20230317191342073.png"
loading="lazy"
alt="image-20230317191342073"
>&lt;/p>
&lt;p>这里我们也可以看到，&lt;code>afterPropertiesSet&lt;/code>方法的执行是在&lt;code>init-method&lt;/code>属性指定的初始化方法前执行的。&lt;/p>
&lt;h3 id="实例化bean的方法">实例化Bean的方法&lt;/h3>
&lt;h4 id="静态工厂方法">静态工厂方法&lt;/h4>
&lt;p>类似于单例工厂模式&lt;/p>
&lt;p>新建一个&lt;code>MyBeanFactory&lt;/code>类，此类有一个静态方法&lt;code>getBean&lt;/code>来获取一个&lt;code>UserServiceImpl&lt;/code>实例化对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyBeanFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="nf">getBean&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserServiceImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在xml文件中进行配置&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userServiceFactory&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.factory.MyBeanFactory&amp;#34;&lt;/span> &lt;span class="na">factory-method=&lt;/span>&lt;span class="s">&amp;#34;getBean&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此配置并不会将&lt;code>MyBeanFactory&lt;/code>加入单例池，而是会自动执行工厂内的getBean方法来返回UserServiceImpl实例化对象&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679055056_image-20230317201052885.png"
loading="lazy"
alt="image-20230317201052885"
>&lt;/p>
&lt;h4 id="实例工厂方法">实例工厂方法&lt;/h4>
&lt;p>修改上述&lt;code>MyBeanFactory&lt;/code>类，将静态方法修改为普通方法。&lt;/p>
&lt;p>同时修改xml配置为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userServiceFactory&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.factory.MyBeanFactory&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="na">factory-bean=&lt;/span>&lt;span class="s">&amp;#34;userServiceFactory&amp;#34;&lt;/span> &lt;span class="na">factory-method=&lt;/span>&lt;span class="s">&amp;#34;getBean&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再次运行会产生和上述一样的结果,区别在于将我们的&lt;code>MyBeanFactory&lt;/code>类也加入了单例池中&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230317_1679055497_image-20230317201814909.png"
loading="lazy"
alt="image-20230317201814909"
>&lt;/p>
&lt;h4 id="带参静态工厂与实例工厂方法">带参静态工厂与实例工厂方法&lt;/h4>
&lt;p>如果我们的实例化对象在构造时存在参数的传入(带参构造，Bean实例化必须存在一个无参构造)，此时我们可以使用&lt;code>constructor-arg&lt;/code>标签来指定参数名称(&lt;code>name&lt;/code>属性)与数值(&lt;code>value&lt;/code>属性)。&lt;/p>
&lt;p>修改上述自定义工厂的getBean方法为带参方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="nf">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;age:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UserServiceImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改xml文件，在获取对应实例对象的bean标签下添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="na">factory-bean=&lt;/span>&lt;span class="s">&amp;#34;userServiceFactory&amp;#34;&lt;/span> &lt;span class="na">factory-method=&lt;/span>&lt;span class="s">&amp;#34;getBean&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;constructor-arg&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;constructor-arg&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;18&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行后即可正常输出&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>Spring博大精深啊&lt;/p></description></item><item><title>SpringDay01</title><link>https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 16 Mar 2023 17:45:29 +0800</pubDate><guid>https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h1 id="spring概述">Spring概述&lt;/h1>
&lt;p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。&lt;/p>
&lt;p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。&lt;/p>
&lt;p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。&lt;/p>
&lt;p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 的编程模型来促进良好的编程实践。&lt;/p>
&lt;h1 id="spring快速入门">Spring快速入门&lt;/h1>
&lt;p>&lt;strong>本项目使用Maven构建&lt;/strong>&lt;/p>
&lt;h2 id="spring-ioc容器">Spring IOC容器&lt;/h2>
&lt;p>在常规Java开发中，Bean的管理常常是非常头疼的事情，常规一般随用随new，造成极大资源浪费，而且增大了代码的耦合程度，使定位问题和修改成为了极大的困难，Spring的出现解决了这一问题，他将开发者与Bean进行了抽离，在两者之间使用Bean工厂进行链接，使Bean的创建与管理极大的便利了起来。&lt;/p>
&lt;p>常规方式管理Bean：开发者&amp;ndash;&amp;gt;Bean&lt;/p>
&lt;p>Spring方式管理Bean：开发者&amp;ndash;&amp;gt;第三方工具&amp;ndash;&amp;gt;Bean&lt;/p>
&lt;p>Spring中提供了两种方式创建Bean对象，一种使用BeanFactory来创建，一种使用ApplicationContext来创建。&lt;/p>
&lt;p>以上两种方式需要首先从配置文件中指定bean的名称等属性&lt;/p>
&lt;h3 id="创建xml配置文件">创建xml配置文件&lt;/h3>
&lt;p>首先ApplicationContext有三种方式&lt;/p>
&lt;ul>
&lt;li>系统路径获取配置文件 (FileSystemXmlApplicationContext)&lt;/li>
&lt;li>直接获取配置文件 (ClassPathXmlApplicationContext)&lt;/li>
&lt;li>注解方式获取Bean (AnnotationConfigApplicationContext)&lt;/li>
&lt;/ul>
&lt;p>我们这里使用第二种也是除了注解外最常用的一种方式，在项目的resource文件夹下创建&lt;code>applicationContext.xml&lt;/code>文件。&lt;/p>
&lt;p>文件初始内容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;beans&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们在项目中创建几个测试Bean对象，如下图所示，其中&lt;code>UserServiceImpl&lt;/code>实现了&lt;code>UserService&lt;/code>接口，并在内部引用了&lt;code>UserDao&lt;/code>对象。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230316_1678963189_image-20230316183943486.png"
loading="lazy"
alt="image-20230316183943486"
>&lt;/p>
&lt;p>UserServiceImpl内部书写&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">UserDao&lt;/span> &lt;span class="n">userDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setUserDao&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">UserDao&lt;/span> &lt;span class="n">userDao&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">userDao&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">userDao&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userDao&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用beanfactory创建bean对象">使用BeanFactory创建Bean对象&lt;/h3>
&lt;p>首先我们使用BeanFactory方式创建Bean对象。&lt;/p>
&lt;h4 id="bean标签形式">Bean标签形式&lt;/h4>
&lt;p>编辑我们创建的&lt;code>applicationContext.xml&lt;/code>文件，配置如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.service.impl.UserServiceImpl&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>bean&lt;/code>标签表示为一个bean对象，&lt;code>id&lt;/code>属性为唯一标识，在后续中可通过该标识获取Bean对象，&lt;code>class&lt;/code>属性为实例化对象位置。&lt;/p>
&lt;p>接下来我们在主包下创建BeanFactoryTest测试类来测试，其中main方法内书写如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建Bean工厂
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">DefaultListableBeanFactory&lt;/span> &lt;span class="n">beanFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultListableBeanFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建读取器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">XmlBeanDefinitionReader&lt;/span> &lt;span class="n">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">XmlBeanDefinitionReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//读取配置文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">loadBeanDefinitions&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;applicationContext.xml&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//通过getBean获取Bean对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">beanFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种方法下&lt;code>userService&lt;/code>中并没有实例化&lt;code>userDao&lt;/code>对象，运行后可以观测到输出&lt;/p>
&lt;p>&lt;code>org.itHeima.service.impl.UserServiceImpl@28f67ac7&lt;/code>。&lt;/p>
&lt;h4 id="自动注入形式">自动注入形式&lt;/h4>
&lt;p>修改xml配置文件中内容为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.service.impl.UserServiceImpl&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;userDao&amp;#34;&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;userDao&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;userDao&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;org.itHeima.Dao.impl.UserDaoImpl&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>property&lt;/code>标签表示其为当前bean的一个属性内容，这里的&lt;code>name&lt;/code>属性应该与&lt;code>userServiceImpl&lt;/code>中的&lt;code>setUserDao&lt;/code>方法中&lt;strong>set后的&lt;/strong>名称(&lt;strong>UserDao-&amp;gt;userDao&lt;/strong>)吻合,并不是下方的&lt;code>id&lt;/code>属性，后面的&lt;code>ref&lt;/code>属性才应为要自动注入的bean的&lt;code>id&lt;/code>属性。&lt;/p>
&lt;p>main方法不变。&lt;/p>
&lt;p>运行后应输出以下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">org.itHeima.Dao.impl.UserDaoImpl@17550481 //userDao对象实例地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">org.itHeima.service.impl.UserServiceImpl@735f7ae5 //userService对象实例地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上为BeanFactory方法创建Bean对象，可以见到代码略多，不易记忆，而且功能较少，接下来我们将使用也是开发中常用的&lt;code>ApplicationContext&lt;/code>方法来创建实例Bean。&lt;/p>
&lt;h3 id="使用applicationcontext创建bean">使用ApplicationContext创建Bean&lt;/h3>
&lt;p>xml配置文件不用改变，我们创建一个&lt;code>ApplicationContextTest&lt;/code>测试类来测试，在main方法中输入以下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ClassPathXmlApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;applicationContext.xml&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;userService&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行后将输出与上方BeanFactory方法运行相一致的结果。&lt;/p>
&lt;h3 id="applicationcontext与beanfactory的区别">ApplicationContext与BeanFactory的区别&lt;/h3>
&lt;p>那么为什么在工作中常常使用&lt;code>ApplicationContext&lt;/code>来进行Bean的创建呢，一个是代码简单易于记忆，而另外就是它与&lt;code>BeanFactory&lt;/code>有着截然的不同。&lt;/p>
&lt;ul>
&lt;li>ApplicationContext脱身于BeanFactory，又青出于蓝而胜于蓝，比传统的BeanFactory多出了很多功能，包括监视器、国际化等。我们在它的类继承图中也可以看到，它实现了&lt;code>BeanFactory&lt;/code>接口，又实现了其他一些功能性的接口，加强了自身的功能。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230316_1678966398_appliactionContext%e7%bb%a7%e6%89%bf%e5%85%b3%e7%b3%bb%e5%9b%be.png"
loading="lazy"
alt="image-20230316193239887"
>&lt;/p>
&lt;ul>
&lt;li>BeanFactory更应该称之为一个Spring工厂，负责生产和管理Bean，而ApplicationContext更高级一些，可以被称之为Spring容器。&lt;/li>
&lt;li>Bean的初始化时机不同，在默认情况下，ApplicationContext在读取配置文件的同时就创建好了Bean并添加到了Bean池中，而BeanFactory是在首次&lt;code>getBean&lt;/code>时才会对对象实例并初始化，这里可以进行调试验证，分别在&lt;code>ApplicationContextTest&lt;/code>测试类中的读取配置文件与&lt;code>BeanFactoryTest&lt;/code>测试类中读取配置文件处打上断点，进行调试。会发现在&lt;code>ApplicationContextTest&lt;/code>执行完毕配置文件读取后，单例Bean池内已经存在了&lt;code>userService&lt;/code>对象&lt;/li>
&lt;/ul>
&lt;p>​ &lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230316_1678967097_applicationContext%e5%8a%a0%e8%bd%bdBean%e6%97%b6%e6%9c%ba.png"
loading="lazy"
alt="image-20230316194433029"
>&lt;/p>
&lt;p>​ 而调试&lt;code>BeanFactoryTest&lt;/code>测试类时我们发现，再执行完毕加载配置文件后，单例池内并没有出现&lt;code>userService&lt;/code>对象，而在执行&lt;code>getBean&lt;/code>方法时，才正式加到了单例池内。如下图&lt;/p>
&lt;p>​ &lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230316_1678968914_BeanFactory%e6%96%b9%e6%b3%95%e5%8a%a0%e8%bd%bd%e6%97%b6%e6%9c%ba1.png"
loading="lazy"
alt="image-20230316195349951"
>&lt;/p>
&lt;p>​ 执行&lt;code>getBean&lt;/code>方法后&lt;/p>
&lt;p>​ &lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg@master/2023/03/upgit_20230316_1678968904_BeanFactory%e6%96%b9%e6%b3%95%e5%8a%a0%e8%bd%bd%e6%97%b6%e6%9c%ba2.png"
loading="lazy"
alt="image-20230316195506908"
>&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>今天学习了Spring中常见的Bean生产方式，分为&lt;code>BeanFactory&lt;/code>与&lt;code>ApplicationContext&lt;/code>方式，后者更为常用与强大。&lt;/p>
&lt;p>虽然如今SpringBoot与SpringCould如火如荼，但其底层仍为Spring框架，之前只是使用SpringBoot进行项目开发，并未从源码角度进行思考，只是会用的级别，此次从新学习Spring有了更多感悟。&lt;/p></description></item><item><title>虚拟机下的ArchLinux 安装实录(一)</title><link>https://mnmnmssd.github.io/p/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E7%9A%84archlinux-%E5%AE%89%E8%A3%85%E5%AE%9E%E5%BD%95/</link><pubDate>Mon, 10 Aug 2020 23:23:10 +0000</pubDate><guid>https://mnmnmssd.github.io/p/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E7%9A%84archlinux-%E5%AE%89%E8%A3%85%E5%AE%9E%E5%BD%95/</guid><description>&lt;h1 id="虚拟机下的archlinux-安装实录一">虚拟机下的ArchLinux 安装实录(一)&lt;/h1>
&lt;h2 id="获取镜像---创建虚拟机">获取镜像 -&amp;gt; 创建虚拟机&lt;/h2>
&lt;h3 id="获取安装镜像">获取安装镜像&lt;/h3>
&lt;p>首先在 &lt;a class="link" href="https://www.archlinux.org/download/" target="_blank" rel="noopener"
>Archlinux.org&lt;/a> 处选择适合的镜像与下载方式&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811113135424.png"
loading="lazy"
alt="image-20200811113135424"
>&lt;/p>
&lt;p>这里选择 &lt;a class="link" href="http://mirrors.163.com/archlinux/iso/2020.08.01/" target="_blank" rel="noopener"
>163&lt;/a> 源的下载镜像(ISO)&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150119046.png"
loading="lazy"
alt="image-20200811150119046"
>&lt;/p>
&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;p>选择自定义(高级) -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/111.png"
loading="lazy"
alt="image-20200811150218403"
>&lt;/p>
&lt;p>默认就好 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/2222.png"
loading="lazy"
alt="image-20200811150306980"
>&lt;/p>
&lt;p>选择刚刚下载好的镜像 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150345665.png"
loading="lazy"
alt="image-20200811150345665"
>&lt;/p>
&lt;p>操作系统选择 &lt;code>Linux&lt;/code> , 版本根据自己下载的内核选择 , 这里选择 &lt;code>5.x&lt;/code> 内核 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150517381.png"
loading="lazy"
alt="image-20200811150517381"
>&lt;/p>
&lt;p>根据自己情况选择安装位置 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150606483.png"
loading="lazy"
alt="image-20200811150606483"
>&lt;/p>
&lt;p>根据自己情况自行配置 , 也可后期更改 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/3333.png"
loading="lazy"
alt="image-20200811150658662"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/4444.png"
loading="lazy"
alt="image-20200811150713274"
>&lt;/p>
&lt;p>这里选择 &lt;code>NAT&lt;/code> 连接方式 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150821883.png"
loading="lazy"
alt="image-20200811150821883"
>&lt;/p>
&lt;p>默认即可 -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150844908.png"
loading="lazy"
alt="image-20200811150844908"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150853037.png"
loading="lazy"
alt="image-20200811150853037"
>&lt;/p>
&lt;p>视情况而定 , 这里选择 &lt;code>20G&lt;/code> -&amp;gt; 下一步&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150944834.png"
loading="lazy"
alt="image-20200811150944834"
>&lt;/p>
&lt;p>一直下一步直到出现完成界面 -&amp;gt; 完成&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811151034804.png"
loading="lazy"
alt="image-20200811151034804"
>&lt;/p>
&lt;h3 id="更改启动模式">更改启动模式&lt;/h3>
&lt;p>在虚拟机详情页面 ，点击进入虚拟机设置 ，进入 &lt;code>选项&lt;/code> 选项卡 ，点击 &lt;code>高级&lt;/code> 选项 ，在 &lt;code>固件类型&lt;/code> 处选择 &lt;code>UEFI&lt;/code> ，点击确定&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/5555.png"
loading="lazy"
alt="image-20200811152442125"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/6666.png"
loading="lazy"
alt="image-20200811152420629"
>&lt;/p>
&lt;h2 id="arch安装">Arch安装&lt;/h2>
&lt;h3 id="安装菜单页面">安装菜单页面&lt;/h3>
&lt;p>开启刚创建的虚拟机&lt;/p>
&lt;p>这里选择 &lt;em>&lt;code>Arch Linux install medium&lt;/code>&lt;/em>, 敲回车[Enter]进入&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/9999.png"
loading="lazy"
alt="image-20200811152739303"
>&lt;/p>
&lt;p>等待&amp;hellip;&amp;hellip; 进入Live默认Shell&lt;/p>
&lt;p>出现这个就代表进入成功了 ，如果没有进入 ，就要考虑是否镜像下载完整了&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811151606159.png"
loading="lazy"
alt="image-20200811151606159"
>&lt;/p>
&lt;h3 id="键盘布局">键盘布局&lt;/h3>
&lt;p>初始键盘布局是标准的 &lt;code>QWERTY&lt;/code> 布局 ，如果想更改布局 ，则输入以下命令查看支持的布局&lt;/p>
&lt;p>&lt;code>ls /usr/share/kbd/keymaps/**/*.map.gz&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/8888.png"
loading="lazy"
alt="image-20200811152119693"
>&lt;/p>
&lt;p>设置键盘布局为以下命令&lt;/p>
&lt;p>&lt;code>loadkeys 布局名称&lt;/code>&lt;/p>
&lt;p>这里并不更改布局 ，进行下一步的安装&lt;/p>
&lt;h3 id="验证启动模式">验证启动模式&lt;/h3>
&lt;p>验证启动模式来为后面的 &lt;code>GRUB&lt;/code> 引导安装做准备 ，输入以下命令&lt;/p>
&lt;p>&lt;code>ls /sys/firmware/efi/efivars&lt;/code>&lt;/p>
&lt;p>若正确显示为以下界面 ，则表示系统以 &lt;code>UEFI&lt;/code> 模式启动 ，若提示目录不存在，则可能以 &lt;code>BIOS&lt;/code> 或 &lt;code>CSM&lt;/code> 等模式启动 ，本教程是以 &lt;code>UEFI&lt;/code> 模式为基础的&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153154877.png"
loading="lazy"
alt="image-20200811153154877"
>&lt;/p>
&lt;h3 id="网络连接">网络连接&lt;/h3>
&lt;p>虚拟机启动了 &lt;code>NAT&lt;/code> 模式 ，所以默认是直接连接了网络的 ， 可以执行 &lt;code>ip link&lt;/code> 命令查看网络信息 ， 执行 &lt;code>ping&lt;/code> 命令查看网络连通情况&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153430905.png"
loading="lazy"
alt="image-20200811153430905"
>&lt;/p>
&lt;h3 id="时间校正">时间校正&lt;/h3>
&lt;p>输入以下命令来确保系统时间准确&lt;/p>
&lt;p>&lt;code>timedatectl set-ntp true&lt;/code>&lt;/p>
&lt;p>可以使用 &lt;code>timedatectl status&lt;/code> 来查看时间状态&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153720383.png"
loading="lazy"
alt="image-20200811153720383"
>&lt;/p>
&lt;h2 id="硬盘分区">硬盘分区&lt;/h2>
&lt;p>分区是很重要的 ，这里也有几个坑&lt;/p>
&lt;h3 id="建立分区">建立分区&lt;/h3>
&lt;p>这里使用 &lt;code>fdisk&lt;/code> 工具来建立分区&lt;/p>
&lt;p>输入 &lt;code>fdisk -l&lt;/code> 查看硬盘信息 ，其中以 &lt;code>loop&lt;/code>/&lt;code>rom&lt;/code>/&lt;code>airoot&lt;/code> 结尾的可以省略&lt;/p>
&lt;p>这里我的硬盘被识别并命名为 &lt;code>/dev/sda&lt;/code> ， 记好这个名称 ， 接下来将在这块硬盘上进行分区&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/7777.png"
loading="lazy"
alt="image-20200811154130565"
>&lt;/p>
&lt;p>输入 &lt;code>fdisk /dev/sda&lt;/code> 进入分区命令界面 ， 可以输入 &lt;code>m&lt;/code> 查看命令帮助&lt;/p>
&lt;p>这里输入 &lt;code>g&lt;/code> 新建 &lt;code>GPT 分区表&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/101010.png"
loading="lazy"
alt="image-20200811154329134"
>&lt;/p>
&lt;p>输入 &lt;code>n&lt;/code> 来新建分区 ， 第一个分区我们把它作为一个 &lt;code>EFI 系统分区&lt;/code>&lt;/p>
&lt;p>分区标识默认1即可 [Enter]， 分区开始 ，这里我们输入 &lt;code>2048&lt;/code> ，敲击回车&lt;/p>
&lt;p>结束标识 ，可以直接输入分区大小 ， boot分区不需要太大 ， 输入 &lt;code>+500M&lt;/code> 即可 ，第一个分区建立完毕。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811154722520.png"
loading="lazy"
alt="image-20200811154722520"
>&lt;/p>
&lt;p>接下来建立第二个分区 ， 我们把它作为 &lt;code>SWAP 交换空间&lt;/code>的分区 ，可以理解为 win 的虚拟内存 , 依旧输入 &lt;code>n&lt;/code> ，分区标识这里选择 3 ，因为我们打算 2 来作为主分区的标识 ，起始标识默认即可 ， 结束标识因为是作为交换空间来使用 ， 所以可以适当设置大一些 ，至此第二个分区建立完毕&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155117805.png"
loading="lazy"
alt="image-20200811155117805"
>&lt;/p>
&lt;p>接下来建立主分区 ，输入 &lt;code>n&lt;/code> ，分区标识默认 2 ，起始标识默认 ， 结束标识默认直到最后 ，至此三个分区全部建立完毕&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155248590.png"
loading="lazy"
alt="image-20200811155248590"
>&lt;/p>
&lt;p>输入 &lt;code>w&lt;/code> 来保存并退出分区&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155320845.png"
loading="lazy"
alt="image-20200811155320845"
>&lt;/p>
&lt;p>可以再执行 &lt;code>fdisk -l&lt;/code> 查看分区情况 ， 可以看到多出了三个新建的分区&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/111111.png"
loading="lazy"
alt="image-20200811155406918"
>&lt;/p>
&lt;h3 id="设置文件系统类型">设置文件系统类型&lt;/h3>
&lt;p>接下来设置每个分区的文件系统与格式化&lt;/p>
&lt;p>这里注意: &lt;em>&lt;code>EFI系统分区的文件系统必须是FAT32的系统&lt;/code>&lt;/em> ，如果是其他类型的系统 ， 会导致 &lt;code>GRUB&lt;/code> 安装失败&lt;/p>
&lt;p>首先格式化 &lt;code>EFI 系统分区&lt;/code> ，输入 &lt;code>mkfs.fat -F32 /dev/sda1&lt;/code> 来设置分区系统类型为 &lt;code>FAT32&lt;/code> 并格式化&lt;/p>
&lt;p>接下来格式化并设置 &lt;code>SWAP 分区&lt;/code> ，输入 &lt;code>mkswap /dev/sda3&lt;/code> 来初始化 &lt;code>SWAP 分区&lt;/code> ，接着输入 &lt;code>swapon /dev/sda3&lt;/code> 激活 &lt;code>SWAP&lt;/code>&lt;/p>
&lt;p>最后格式化主分区 ， 输入 &lt;code>mkfs.ext4 /dev/sda2&lt;/code> 格式化并设置主分区格式&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811160513632.png"
loading="lazy"
alt="image-20200811160513632"
>&lt;/p>
&lt;h3 id="挂载分区">挂载分区&lt;/h3>
&lt;p>接下来进行分区挂载 ， 首先将主分区挂载到 &lt;code>/mnt&lt;/code> 目录 ，这也是根目录&lt;/p>
&lt;p>&lt;code>mount /dev/sda2 /mnt&lt;/code>&lt;/p>
&lt;p>进行 &lt;code>EFI 系统分区&lt;/code> 挂载&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir /mnt/efi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount /dev/sda1 /mnt/efi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811161158469.png"
loading="lazy"
alt="image-20200811161158469"
>&lt;/p>
&lt;p>执行 &lt;code>lsblk&lt;/code> 查看挂载情况&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811161344180.png"
loading="lazy"
alt="image-20200811161344180"
>&lt;/p>
&lt;p>&lt;code>SWAP&lt;/code> 分区会自动挂载 ，所以无需设置&lt;/p>
&lt;h3 id="安装系统镜像和软件包">安装系统镜像和软件包&lt;/h3>
&lt;h4 id="设置源">设置源&lt;/h4>
&lt;p>因为不可抗力的情况 ，国内使用默认源会出现下载缓慢的情况 ，所以要设置国内源 ，比如清华源等 ，这里编辑 &lt;code>/etc/pacman.d/mirrorlist&lt;/code> 可以设置国内镜像源 ， 这里我们添加清华源&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim /etc/pacman.d/mirrorlist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">添加一条记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> https://mirrors.tuna.tsinghua.edu.cn/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">更新源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pacman -Syy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="安装软件包">安装软件包&lt;/h4>
&lt;p>使用 &lt;code>pacstrap&lt;/code> 脚本 ， 安装 &lt;code>base&lt;/code> 软件包和 &lt;code>linux 内核&lt;/code>等等 ，新版Arch不带Vim等软件 ，所以也建议安装上 ，以及 &lt;code>dhcpcd&lt;/code> , &lt;code>haveged&lt;/code> 等&lt;/p>
&lt;p>最基本的套件为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pacstrap /mnt base linux linux-firmware
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以直接执行我这条指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pacstrap /mnt base base-devel linux linux-firmware dhcpcd haveged
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等待下载与安装完成 ，安装完成后进入系统配置&lt;/p>
&lt;h2 id="系统配置">系统配置&lt;/h2>
&lt;p>生成 &lt;code>fstab&lt;/code> 文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /mnt/etc/fstab
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/121212.png"
loading="lazy"
alt="image-20200811163334589"
>&lt;/p>
&lt;h3 id="chroot">Chroot&lt;/h3>
&lt;p>进入新安装的系统&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">arch-chroot /mnt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="语言与时区设置">语言与时区设置&lt;/h3>
&lt;h4 id="设置时区">设置时区&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hwclock --systohc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="设置语言地区">设置语言地区&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vim /etc/locale.gen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">找到需要的地区语言 ，将注释移除
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">如: en_US.UTF-8 UTF-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zh_CN.UTF-8 UTF-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale-gen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">生成locale信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">创建 locale.conf 文件 ，并添加
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LANG=en_US.UTF-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">也可设置为中文 ，视情况而定
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="网络配置">网络配置&lt;/h3>
&lt;p>编辑主机名称&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">vim /etc/hostname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">XXX
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑 &lt;code>hosts&lt;/code> 添加&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">127.0.0.1 localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">::1 localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">127.0.0.1 XXX.localdomain XXX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 其中XXX为上一步创建的主机名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置 &lt;code>dhcpcd&lt;/code> / &lt;code>haveged&lt;/code> 开机启动&lt;/p>
&lt;p>&lt;code>dhcpcd&lt;/code> 会自动分配ip&lt;/p>
&lt;p>&lt;code>haveged&lt;/code> 会在开机时自动搜集 &lt;code>系统熵&lt;/code> 解决开机启动缓慢的问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">systemctl enable dhcpcd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl enable haveged
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用户设置">用户设置&lt;/h3>
&lt;p>设置 &lt;code>root&lt;/code> 密码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加一个用户并设置权限与密码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># useradd -m -g users -s /bin/bash XXX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">passwd XXX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vim /etc/sudoers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">在 root ALL=(ALL) ALL 下添加一句
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">XXX ALL=(ALL) ALL
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装grub引导">安装GRUB引导&lt;/h2>
&lt;p>安装 &lt;code>grub&lt;/code> 和 &lt;code>efibootmgr&lt;/code> 软件包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pacman -S grub efibootmgr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="grub-安装">GRUB 安装&lt;/h4>
&lt;p>安装前使用 &lt;code>uname -a&lt;/code> 查看自己的系统架构&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/131313.png"
loading="lazy"
alt="image-20200811171434724"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 注意
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># --target后为你的系统架构 ，如我的为x86_64 ，--efi-directory后为你的 EFI系统分区地址
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此处有一个小坑 ，若你的 &lt;code>EFI 系统分区&lt;/code> 不是&lt;code>fat32&lt;/code>类型 ， 就会安装失败&lt;/p>
&lt;p>如果为&lt;code>fat32&lt;/code>仍安装失败 ， 可以用 &lt;code>gdisk&lt;/code> 将分区设置 &lt;code>ef00&lt;/code>&lt;/p>
&lt;p>如图所示 ， 即为安装完成&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/1414.png"
loading="lazy"
alt="image-20200811172429643"
>&lt;/p>
&lt;h4 id="生成配置文件">生成配置文件&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811172715340.png"
loading="lazy"
alt="image-20200811172715340"
>&lt;/p>
&lt;h2 id="安装完成">安装完成&lt;/h2>
&lt;p>退出新系统 , 重启&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">exit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="进入新系统-开始愉快玩耍">进入新系统 ，开始愉快玩耍&lt;/h3>
&lt;h2 id="使用aur">使用AUR&lt;/h2>
&lt;p>既然用上了 &lt;code>Arch&lt;/code> 不能不来用一下 &lt;code>AUR&lt;/code> ，&lt;code>AUR&lt;/code> 工具很多 ，这里选择 &lt;code>yay&lt;/code>&lt;/p>
&lt;p>首先添加 &lt;code>pacman&lt;/code> 的 &lt;code>archlinuxcn&lt;/code> 源&lt;/p>
&lt;p>修改 &lt;code>/etc/pacman.conf&lt;/code> ，在最后添加以下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[archlinuxcn]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行 &lt;code>pacman -Syy&lt;/code> 更新源&lt;/p>
&lt;p>安装 &lt;code>archlinuxcn-keyring&lt;/code> 来导入 &lt;code>GPG key&lt;/code>&lt;/p>
&lt;p>安装 &lt;code>yay&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">pacman -S yay
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置 &lt;code>AUR&lt;/code> 源&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">yay --aururl &amp;#34;https://aur.tuna.tsinghua.edu.cn&amp;#34; --save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>剩下的就是愉快的安装软件与配置 ，接下来会更新美化 、配置等教程&lt;/p>
&lt;h2 id="几个坑点">几个坑点&lt;/h2>
&lt;ul>
&lt;li>&lt;code>EFI 系统分区&lt;/code>必须要是 &lt;code>FAT32&lt;/code> 格式&lt;/li>
&lt;li>新版&lt;code>arch&lt;/code>貌似在安装后不包括 &lt;code>dhcpcd&lt;/code> ，所以在执行安装安装脚本时请安装 &lt;code>dhcpcd&lt;/code> 服务 ，否则只能进入 &lt;code>LiveCD&lt;/code> 安装了&lt;/li>
&lt;li>如果安装后开机启动缓慢 ，只停留一个界面光标闪烁 ，这是搜集&lt;code>系统熵&lt;/code>的问题 ， 安装 &lt;code>haveged&lt;/code> 并开启服务可解决&lt;/li>
&lt;li>&lt;code>archlinux-keyring&lt;/code> 安装失败 ，并提示 &lt;code>could not be locally signed(无法在本地签署)&lt;/code> ， 请看&lt;a class="link" href="https://www.archlinuxcn.org/gnupg-2-1-and-the-pacman-keyring/" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>2020年8月11日&lt;/p>
&lt;p>by &amp;mdash;笑的心酸&lt;/p>
&lt;/blockquote></description></item><item><title>新版Windows Terminal美化配置</title><link>https://mnmnmssd.github.io/p/windows-terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 09 Jun 2020 10:14:58 +0000</pubDate><guid>https://mnmnmssd.github.io/p/windows-terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="关于新版windows-terminal">关于新版Windows Terminal&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，还可以用于创建你自己的主题并自定义文本、颜色、背景和快捷键绑定。
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/wt.png"
loading="lazy"
alt="wt"
>&lt;/p>
&lt;h2 id="下载与安装">下载与安装&lt;/h2>
&lt;p>下载途径有两种：
&lt;strong>&lt;code>需要系统版本190X及以上&lt;/code>&lt;/strong>
可在&lt;a class="link" href="https://aka.ms/terminal" target="_blank" rel="noopener"
>&lt;code>微软商店&lt;/code>&lt;/a>内搜索下载
亦可在&lt;a class="link" href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener"
>&lt;code>GitHub发布页&lt;/code>&lt;/a>下载
&lt;strong>需要注意：&lt;strong>git处有两种版本
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/dl.jpg"
loading="lazy"
alt="版本"
>
第一个为&lt;/strong>预览版&lt;/strong> ，第二个为&lt;strong>稳定版&lt;/strong>，请自行选择下载
安装界面如图(因为我这里已经安装了所以显示为启动，正常应为安装):
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/wt-install.png"
loading="lazy"
alt="wt-install"
>&lt;/p>
&lt;h1 id="美化准备工作">美化准备工作&lt;/h1>
&lt;blockquote>
&lt;ul>
&lt;li>PowerShell7&lt;/li>
&lt;li>良好的网络环境&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="powershell7安装">PowerShell7安装&lt;/h2>
&lt;p>在&lt;a class="link" href="https://github.com/PowerShell/PowerShell" target="_blank" rel="noopener"
>&lt;code>PowerShell&lt;/code>&lt;/a>处选择对应系统下载
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/![ps7]%28ps7.png%29.png"
loading="lazy"
alt="ps7"
>
其中&lt;code>LTS&lt;/code>为长期更新版本, &lt;code>stable&lt;/code> 稳定版本，&lt;code>preview&lt;/code>预览版本&lt;/p>
&lt;h2 id="将terminal添加到右键菜单">将Terminal添加到右键菜单&lt;/h2>
&lt;p>这里有两种方式修改:&lt;/p>
&lt;ul>
&lt;li>通过修改注册表(不推荐)&lt;/li>
&lt;li>使用git上的一键脚本配置&lt;/li>
&lt;/ul>
&lt;p>这里着重说明一下第二种方式(下列操作默认管理员身份运行)
点击&lt;a class="link" href="https://github.com/lextm/windowsterminal-shell" target="_blank" rel="noopener"
>一键脚本&lt;/a>跳转页面
&lt;strong>注意&lt;/strong>&lt;code>需要PowerShell版本为7&lt;/code>
可下载&lt;code>install.sp1&lt;/code>文件然后在&lt;code>PowerShell7&lt;/code>中找到文件执行命令 &lt;code>.\install.ps1&lt;/code>
亦可采用git页面给出的命令安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://raw.githubusercontent.com/lextm/windowsterminal-shell/master/install.ps1&amp;#39;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意：可能会报下列错误&lt;/strong>&lt;/p>
&lt;p>&lt;code>.\install.ps1: File C:\Users\lenovo\Desktop\install.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.&lt;/code>&lt;/p>
&lt;p>这是因为&lt;code>PowerShell&lt;/code>默认执行权限的问题,此时只需打开&lt;code>PowerShell&lt;/code>输入下列命令即可:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">set-ExecutionPolicy RemoteSigned
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="windows-terminal配置文件更改">Windows Terminal配置文件更改&lt;/h2>
&lt;p>打开&lt;code>Windows Terminal&lt;/code>，点击标题栏小三角，打开设置页面
目前官方仍未更新GUI页面，所以打开为一个JSON文件
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/setting.png"
loading="lazy"
alt="setting"
>&lt;/p>
&lt;h3 id="将powershell7添加至windows-terminal启动菜单">将PowerShell7添加至Windows Terminal启动菜单&lt;/h3>
&lt;p>在配置文件中修改以下属性
属性名称:&lt;code>list&lt;/code>
在其中添加:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;{574e775e-4f2a-5b96-ac1e-a2962a402336}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//程序对应的guid属性唯一值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;hidden&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//是否在启动列表隐藏
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pwsh7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//启动列表名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;tabTitle&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;pwsh7&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//选项卡标题名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;source&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Windows.Terminal.PowershellCore&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//这会存储源自配置文件的配置文件生成器的名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;startingDirectory&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//加载 shell 时所处的起始目录 这一步一定要设为&amp;#39;.&amp;#39;，否则会影响后续操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;historySize&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9001&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//历史记录大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;commandline&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C:/Program Files/PowerShell/7/pwsh.exe -nologo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//配置文件中使用的可执行文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;snapOnInput&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c1">//键入时滚动到输入行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>guid&lt;/code>生成可以点击&lt;a class="link" href="http://www.ofmonkey.com/transfer/guid" target="_blank" rel="noopener"
>此处&lt;/a>&lt;/p>
&lt;h3 id="修改默认启动shell">修改默认启动shell&lt;/h3>
&lt;p>此时我们修改默认的启动shell为新安装的&lt;code>PowerShell7&lt;/code>&lt;/p>
&lt;p>属性名称: &lt;code>defaultProfile&lt;/code>
属性值: 对应shell的&lt;code>guid&lt;/code>属性&lt;/p>
&lt;p>将此值改为我们上方设置的&lt;code>PowerShell7&lt;/code>的&lt;code>guid&lt;/code>&lt;/p>
&lt;h3 id="修改字体背景及配色方案等">修改字体，背景及配色方案等&lt;/h3>
&lt;p>在&lt;code>profiles&lt;/code> 属性下的 &lt;code>defaults&lt;/code>属性中添加/修改些默认参数:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;acrylicOpacity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//设置背景模糊度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;useAcrylic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//开启背景毛玻璃效果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;colorScheme&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Monokai Night&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//设置配色方案，需要搭配后面的配色方案使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;suppressApplicationTitle&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//启动自定义选项卡标题
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;fontSize&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//字体大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;fontFace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Fira Code&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//设置字体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="字体修改">字体修改：&lt;/h4>
&lt;p>选择喜欢的字体下载(最好是支持PowerLine的，否则后续会出现字符渲染的问题)
这里以&lt;code>Fira Code&lt;/code>字体为例
点击此处&lt;a class="link" href="https://github.com/tonsky/FiraCode/releases/download/5/Fira_Code_v5.zip" target="_blank" rel="noopener"
>开始下载Fira Code&lt;/a>
安装好字体后，在&lt;code>defaults&lt;/code>属性中添加&lt;code>&amp;quot;fontFace&amp;quot;: &amp;quot;Fira Code&amp;quot;&lt;/code>值&lt;/p>
&lt;h4 id="配色方案修改">配色方案修改:&lt;/h4>
&lt;p>下方网址寻找喜欢的配色方案
&lt;a class="link" href="https://terminalsplash.com/" target="_blank" rel="noopener"
>terminalsplash&lt;/a>
&lt;a class="link" href="https://atomcorp.github.io/themes/" target="_blank" rel="noopener"
>atomcorp&lt;/a>
多种配色方案，此处以第一个网址为例，进入后等待加载完毕
选择喜欢的配色方案，点击&lt;code>code&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/themes.png"
loading="lazy"
alt="themes"
>
复制弹出的代码
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/themes-2.png"
loading="lazy"
alt="themes-2"
>
粘贴至&lt;code>配置文件&lt;/code>的&lt;code>schemes&lt;/code>属性中
如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;schemes&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Monokai Night&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">//配色方案名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nt">&amp;#34;background&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#1f1f1f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;foreground&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#f8f8f8&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#1f1f1f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;blue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#6699df&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;cyan&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#e69f66&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;green&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#a6e22e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;purple&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#ae81ff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#f92672&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;white&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#f8f8f2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;yellow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#e6db74&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightBlack&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#75715e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightBlue&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#66d9ef&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightCyan&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#e69f66&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightGreen&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#a6e22e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightPurple&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#ae81ff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightRed&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#f92672&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightWhite&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#f8f8f2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;brightYellow&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;#e6db74&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改默认配色方案&lt;code>colorScheme&lt;/code>属性值为自定义的配色方案名称&lt;/p>
&lt;h4 id="背景修改">背景修改：&lt;/h4>
&lt;ul>
&lt;li>开启背景毛玻璃效果&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;acrylicOpacity&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mf">0.25&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="c1">//设置背景模糊度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="s2">&amp;#34;useAcrylic&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="c1">//开启毛玻璃效果
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>设置背景图片&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;backgroundImage&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="s2">&amp;#34;图片路径&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;backgroundImageStretchMode&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="s2">&amp;#34;背景拉伸&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="c1">//可选属性: &amp;#34;none&amp;#34;、&amp;#34;fill&amp;#34;、&amp;#34;uniform&amp;#34;、&amp;#34;uniformToFill&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="s2">&amp;#34;backgroundImageAlignment&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="s2">&amp;#34;背景对齐方式&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>&lt;span class="c1">//可选属性: &amp;#34;center&amp;#34;、&amp;#34;left&amp;#34;、&amp;#34;top&amp;#34;、&amp;#34;right&amp;#34;、&amp;#34;bottom&amp;#34;、
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//&amp;#34;topLeft&amp;#34;、&amp;#34;topRight&amp;#34;、&amp;#34;bottomLeft&amp;#34;、&amp;#34;bottomRight&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="s2">&amp;#34;backgroundImageOpacity&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span>&lt;span class="s2">&amp;#34;背景不透明度&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="c1">//0-1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>其他属性如滚动条，光标颜色等可参考&lt;code>官方文档&lt;/code>&lt;a class="link" href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener"
>链接&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="powershell配置">PowerShell配置&lt;/h1>
&lt;p>新版的&lt;code>PowerShell&lt;/code>虽然功能更新不少，但默认的操作和界面比较不耐看，此时我们便需要借助一些插件来完善他&lt;/p>
&lt;h2 id="powershell插件配置">PowerShell插件配置&lt;/h2>
&lt;p>使用管理员身份打开&lt;code>PowerShell&lt;/code>
依次输入下方三个命令安装插件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Install-Module -Name PSReadLine -AllowPrerelease -Force
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Install-Module posh-git -Scope CurrentUser
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Install-Module oh-my-posh -Scope CurrentUser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后输入以下命令来配置插件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">notepad.exe $PROFILE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这会打开默认&lt;code>PowerShell&lt;/code> 的启动配置文件，如果提示没有该文件，点击创建就好
在打开的文件中输入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 引入 posh-git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-Module posh-git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 引入 oh-my-posh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-Module oh-my-posh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#引入 PSReadLine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-Module PSReadLine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置 PowerShell 主题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-Theme Paradox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置 Tab 键补全
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置 Ctrl+d 为退出 PowerShell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-PSReadlineKeyHandler -Key &amp;#34;Ctrl+d&amp;#34; -Function ViExit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置 Ctrl+z 为撤销
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-PSReadLineKeyHandler -Key &amp;#34;Ctrl+z&amp;#34; -Function Undo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置向上键为后向搜索历史记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置向下键为前向搜索历史纪录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>亦可参考&lt;a class="link" href="https://raw.githubusercontent.com/PowerShell/PSReadLine/master/PSReadLine/SamplePSReadLineProfile.ps1" target="_blank" rel="noopener"
>官方样例&lt;/a>来自行修改&lt;/p>
&lt;h2 id="使powershell支持git-bash">使PowerShell支持git bash&lt;/h2>
&lt;p>此时修改的已经差不多了，但&lt;code>PowerShell&lt;/code>的&lt;code>git&lt;/code>功能仍有一些缺陷
我们需要修改环境变量，使&lt;code>PowerShell&lt;/code>更上一层楼
&lt;img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/path.png"
loading="lazy"
alt="path"
>
将&lt;code>git Bash&lt;/code>目录下的&lt;code>usr/bin&lt;/code>路径复制进去就好了&lt;/p>
&lt;h1 id="后记">后记&lt;/h1>
&lt;p>这是我的第一篇文章，自微软&lt;code>Bulid 2019&lt;/code>以来，宣布新的终端&lt;code>Windows Terminal&lt;/code>，我就一直在关注，并第一时间下下来使用，那时的&lt;code>Windows Terminal&lt;/code>充满bug，动不动就会闪退，蛋疼的操作，蛋疼的配置，让我着实没能香起来，最近&lt;code>Bulid 2020&lt;/code>大会，微软正式推出&lt;code>Windows Terminal 1.0&lt;/code>正式版，迫不及待下载后，一个字，香，两个字，真香，虽然还有一些小瑕疵，譬如图形化配置界面，还整json文件呢，真就人均极客了嗷。并没有使用过&lt;code>cmder&lt;/code>、&lt;code>Xshell&lt;/code>等第三方终端，所以以上观点仅代表个人审美。溜了溜了&lt;/p>
&lt;p>顺便这篇文章的生成与发布均使用新版&lt;code>Windows Terminal&lt;/code>&lt;/p>
&lt;blockquote>
&lt;h3 id="参考文献">参考文献:&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener"
>微软官方文档&lt;/a>
&lt;a class="link" href="https://blog.ichr.me/post/windows-terminal-configuration/" target="_blank" rel="noopener"
>如何打造好看还好用的 Windows Terminal&amp;mdash;ChrAlpha&lt;/a>
&lt;a class="link" href="https://sspai.com/post/52907" target="_blank" rel="noopener"
>5 个 PowerShell 主题，让你的 Windows 终端更好看&amp;mdash;少数派&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>