[{"content":"基于XML的Bean配置 基础属性 BeanName与别名 bean标签除了id属性指定唯一标识外，还允许使用name属性指定多个别名\n1 \u0026lt;bean id=\u0026#34;userDao\u0026#34; name=\u0026#34;aaa,bbb,ccc\u0026#34; class=\u0026#34;org.itHeima.Dao.impl.userDaoImpl\u0026#34; /\u0026gt; 此时，除了使用userDao可以获取Bean之外，还可以使用aaa、bbb、ccc来获取，此时这些别名都将保存在单例池中的别名集合中\n1 UserDao userDao = (UserDao) applicationContext.getBean(\u0026#34;aaa\u0026#34;); 假如在声明时并未指定id、name属性，那么此时通过类路径也就是class属性中的内容来获取，除此以外，也可以直接通过类型匹配来获取\n1 2 3 4 //通过类路径 UserDao userDao = (UserDao) applicationContext.getBean(\u0026#34;org.itHeima.Dao.impl.userDaoImpl\u0026#34;); //通过类型匹配 UserDao userDao = applicationContext.getBean(UserDao.class); Bean的作用范围 初始引入spring-context包时，Bean的作用范围只有两个，分别为singleton(单例)与prototype(原型)\nsingleton(单例) 顾名思义，在整个Bean的生命周期内，只会产生一个实例化对象，每次使用getBean都获取的是同一个对象，这也是spring默认的Bean作用域。\n1 2 UserService userService = (UserService) applicationContext.getBean(\u0026#34;userService\u0026#34;); UserService userService2 = (UserService) applicationContext.getBean(\u0026#34;userService\u0026#34;); prototype(原型) 其表示一个Bean对应多个实例对象，并且在读取配置文件时并不会创建Bean对象，而是在每次使用getBean方法获取Bean实例时才会创建，并且每次getBean都会创建并返回一个新的Bean对象。\nBean的延迟加载 如果使用的是BeanFactory方式创建bean对象时，Bean是在使用getBean方法时实例化，而在使用ApplicationContext方式创建时，Bean是在读取配置文件时实例化，通过lazy-init属性则可以控制这一过程。其取值有default、false与true三种。\n延迟加载只能修改ApplicationContext方式，对BeanFactory方式不起效。\n1 \u0026lt;bean id=\u0026#34;userService\u0026#34; class=\u0026#34;org.itHeima.service.impl.UserServiceImpl\u0026#34; lazy-init=\u0026#34;true\u0026#34; /\u0026gt; 运行后，调试发现在读取配置文件时并没有实例化对象和存入单例池。\n只有当调用getBean方法时，才会实例化并放入单例池。\n初始化方法和销毁方法 Spring支持在Bean实例化时执行一些初始方法，并在其销毁前执行销毁方法，使用init-method与destroy-method属性来指定执行的方法名称。\n在UserServiceImpl类中我们添加两个方法。\n1 2 3 public UserServiceImpl() {System.out.println(\u0026#34;无参构造执行...\u0026#34;);} public void init() {System.out.println(\u0026#34;init方法执行...\u0026#34;);} public void destroy() {System.out.println(\u0026#34;destroy方法执行...\u0026#34;);} 在xml配置文件中，我们使用init-method与destroy-method属性来指定方法。\n1 \u0026lt;bean id=\u0026#34;userService\u0026#34; class=\u0026#34;org.itHeima.service.impl.UserServiceImpl\u0026#34; init-method=\u0026#34;init\u0026#34; destroy-method=\u0026#34;destroy\u0026#34;\u0026gt; 执行后可以看到以下输出：\n在结果中我们可以得知init方法是在构造方法之后才会执行，并且并没有输出销毁方法。这是为什么呢，这是因为程序并没有显式的关闭，而是自动停止运行，就好像突然停电，电脑内的一部分数据都没来得及进行保存。所以我们要显式的关闭才会执行销毁方法。\n修改main方法中的代码，由于ApplicationContext并没有声明显式关闭方法，所以我们直接使用它的接口实现类ClassPathXmlApplicationContext中的close方法。\n1 2 ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\u0026#34;applicationContext.xml\u0026#34;); applicationContext.close(); 运行后就可以看到以下输出\ninitializingBean方法初始化 除了使用init-method属性指定初始化方法外，Spring还允许对象通过实现InitializingBean接口中的afterPropertiesSet方法来进行初始化。\n1 2 3 4 5 6 7 8 public class UserServiceImpl implements UserService, InitializingBean{ //...其他方法 @Override public void afterPropertiesSet() throws Exception { System.out.println(\u0026#34;afterPropertiesSet方法执行....\u0026#34;); } } 执行后可以有以下输出：\n这里我们也可以看到，afterPropertiesSet方法的执行是在init-method属性指定的初始化方法前执行的。\n实例化Bean的方法 静态工厂方法 类似于单例工厂模式\n新建一个MyBeanFactory类，此类有一个静态方法getBean来获取一个UserServiceImpl实例化对象\n1 2 3 4 5 public class MyBeanFactory { public static UserService getBean() { return new UserServiceImpl(); } } 在xml文件中进行配置\n1 \u0026lt;bean id=\u0026#34;userServiceFactory\u0026#34; class=\u0026#34;org.itHeima.factory.MyBeanFactory\u0026#34; factory-method=\u0026#34;getBean\u0026#34; /\u0026gt; 此配置并不会将MyBeanFactory加入单例池，而是会自动执行工厂内的getBean方法来返回UserServiceImpl实例化对象\n实例工厂方法 修改上述MyBeanFactory类，将静态方法修改为普通方法。\n同时修改xml配置为\n1 2 \u0026lt;bean id=\u0026#34;userServiceFactory\u0026#34; class=\u0026#34;org.itHeima.factory.MyBeanFactory\u0026#34; /\u0026gt; \u0026lt;bean id=\u0026#34;userService\u0026#34; factory-bean=\u0026#34;userServiceFactory\u0026#34; factory-method=\u0026#34;getBean\u0026#34;/\u0026gt; 再次运行会产生和上述一样的结果,区别在于将我们的MyBeanFactory类也加入了单例池中\n带参静态工厂与实例工厂方法 如果我们的实例化对象在构造时存在参数的传入(带参构造，Bean实例化必须存在一个无参构造)，此时我们可以使用constructor-arg标签来指定参数名称(name属性)与数值(value属性)。\n修改上述自定义工厂的getBean方法为带参方法\n1 2 3 4 public UserService getBean(String name, int age) { System.out.println(\u0026#34;name:\u0026#34; + name + \u0026#34;\\n\u0026#34; + \u0026#34;age:\u0026#34; + age); return new UserServiceImpl(); } 修改xml文件，在获取对应实例对象的bean标签下添加\n1 2 3 4 \u0026lt;bean id=\u0026#34;userService\u0026#34; factory-bean=\u0026#34;userServiceFactory\u0026#34; factory-method=\u0026#34;getBean\u0026#34;\u0026gt; \u0026lt;constructor-arg name=\u0026#34;name\u0026#34; value=\u0026#34;test\u0026#34;/\u0026gt; \u0026lt;constructor-arg name=\u0026#34;age\u0026#34; value=\u0026#34;18\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; 运行后即可正常输出\n小结 Spring博大精深啊\n","date":"2023-03-17T16:55:36+08:00","permalink":"https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0-02/","title":"SpringDay02"},{"content":"Spring概述 Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。\nSpring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布。\nSpring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。\nSpring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 的编程模型来促进良好的编程实践。\nSpring快速入门 本项目使用Maven构建\nSpring IOC容器 在常规Java开发中，Bean的管理常常是非常头疼的事情，常规一般随用随new，造成极大资源浪费，而且增大了代码的耦合程度，使定位问题和修改成为了极大的困难，Spring的出现解决了这一问题，他将开发者与Bean进行了抽离，在两者之间使用Bean工厂进行链接，使Bean的创建与管理极大的便利了起来。\n常规方式管理Bean：开发者\u0026ndash;\u0026gt;Bean\nSpring方式管理Bean：开发者\u0026ndash;\u0026gt;第三方工具\u0026ndash;\u0026gt;Bean\nSpring中提供了两种方式创建Bean对象，一种使用BeanFactory来创建，一种使用ApplicationContext来创建。\n以上两种方式需要首先从配置文件中指定bean的名称等属性\n创建xml配置文件 首先ApplicationContext有三种方式\n系统路径获取配置文件 (FileSystemXmlApplicationContext) 直接获取配置文件 (ClassPathXmlApplicationContext) 注解方式获取Bean (AnnotationConfigApplicationContext) 我们这里使用第二种也是除了注解外最常用的一种方式，在项目的resource文件夹下创建applicationContext.xml文件。\n文件初始内容如下\n1 2 3 4 5 6 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026#34;\u0026gt; \u0026lt;/beans\u0026gt; 我们在项目中创建几个测试Bean对象，如下图所示，其中UserServiceImpl实现了UserService接口，并在内部引用了UserDao对象。\nUserServiceImpl内部书写\n1 2 3 4 5 6 private UserDao userDao; public void setUserDao(UserDao userDao) { this.userDao = userDao; System.out.println(userDao); } 使用BeanFactory创建Bean对象 首先我们使用BeanFactory方式创建Bean对象。\nBean标签形式 编辑我们创建的applicationContext.xml文件，配置如下\n1 \u0026lt;bean id=\u0026#34;userService\u0026#34; class=\u0026#34;org.itHeima.service.impl.UserServiceImpl\u0026#34; /\u0026gt; 其中bean标签表示为一个bean对象，id属性为唯一标识，在后续中可通过该标识获取Bean对象，class属性为实例化对象位置。\n接下来我们在主包下创建BeanFactoryTest测试类来测试，其中main方法内书写如下\n1 2 3 4 5 6 7 8 9 10 //创建Bean工厂 DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory(); //创建读取器 XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory); //读取配置文件 reader.loadBeanDefinitions(\u0026#34;applicationContext.xml\u0026#34;); //通过getBean获取Bean对象 UserService userService = (UserService) beanFactory.getBean(\u0026#34;userService\u0026#34;); System.out.println(userService); 在这种方法下userService中并没有实例化userDao对象，运行后可以观测到输出\norg.itHeima.service.impl.UserServiceImpl@28f67ac7。\n自动注入形式 修改xml配置文件中内容为\n1 2 3 4 \u0026lt;bean id=\u0026#34;userService\u0026#34; class=\u0026#34;org.itHeima.service.impl.UserServiceImpl\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;userDao\u0026#34; ref=\u0026#34;userDao\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;userDao\u0026#34; class=\u0026#34;org.itHeima.Dao.impl.UserDaoImpl\u0026#34;/\u0026gt; 其中property标签表示其为当前bean的一个属性内容，这里的name属性应该与userServiceImpl中的setUserDao方法中set后的名称(UserDao-\u0026gt;userDao)吻合,并不是下方的id属性，后面的ref属性才应为要自动注入的bean的id属性。\nmain方法不变。\n运行后应输出以下内容\n1 2 org.itHeima.Dao.impl.UserDaoImpl@17550481 //userDao对象实例地址 org.itHeima.service.impl.UserServiceImpl@735f7ae5 //userService对象实例地址 以上为BeanFactory方法创建Bean对象，可以见到代码略多，不易记忆，而且功能较少，接下来我们将使用也是开发中常用的ApplicationContext方法来创建实例Bean。\n使用ApplicationContext创建Bean xml配置文件不用改变，我们创建一个ApplicationContextTest测试类来测试，在main方法中输入以下内容\n1 2 3 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\u0026#34;applicationContext.xml\u0026#34;); UserService userService = (UserService) applicationContext.getBean(\u0026#34;userService\u0026#34;); System.out.println(userService); 运行后将输出与上方BeanFactory方法运行相一致的结果。\nApplicationContext与BeanFactory的区别 那么为什么在工作中常常使用ApplicationContext来进行Bean的创建呢，一个是代码简单易于记忆，而另外就是它与BeanFactory有着截然的不同。\nApplicationContext脱身于BeanFactory，又青出于蓝而胜于蓝，比传统的BeanFactory多出了很多功能，包括监视器、国际化等。我们在它的类继承图中也可以看到，它实现了BeanFactory接口，又实现了其他一些功能性的接口，加强了自身的功能。 BeanFactory更应该称之为一个Spring工厂，负责生产和管理Bean，而ApplicationContext更高级一些，可以被称之为Spring容器。 Bean的初始化时机不同，在默认情况下，ApplicationContext在读取配置文件的同时就创建好了Bean并添加到了Bean池中，而BeanFactory是在首次getBean时才会对对象实例并初始化，这里可以进行调试验证，分别在ApplicationContextTest测试类中的读取配置文件与BeanFactoryTest测试类中读取配置文件处打上断点，进行调试。会发现在ApplicationContextTest执行完毕配置文件读取后，单例Bean池内已经存在了userService对象 ​\t​\t而调试BeanFactoryTest测试类时我们发现，再执行完毕加载配置文件后，单例池内并没有出现userService对象，而在执行getBean方法时，才正式加到了单例池内。如下图\n​\t​\t执行getBean方法后\n​\t小结 今天学习了Spring中常见的Bean生产方式，分为BeanFactory与ApplicationContext方式，后者更为常用与强大。\n虽然如今SpringBoot与SpringCould如火如荼，但其底层仍为Spring框架，之前只是使用SpringBoot进行项目开发，并未从源码角度进行思考，只是会用的级别，此次从新学习Spring有了更多感悟。\n","date":"2023-03-16T17:45:29+08:00","permalink":"https://mnmnmssd.github.io/p/spring%E5%AD%A6%E4%B9%A0/","title":"SpringDay01"},{"content":"虚拟机下的ArchLinux 安装实录(一) 获取镜像 -\u0026gt; 创建虚拟机 获取安装镜像 首先在 Archlinux.org 处选择适合的镜像与下载方式\n这里选择 163 源的下载镜像(ISO)\n创建虚拟机 选择自定义(高级) -\u0026gt; 下一步\n默认就好 -\u0026gt; 下一步\n选择刚刚下载好的镜像 -\u0026gt; 下一步\n操作系统选择 Linux , 版本根据自己下载的内核选择 , 这里选择 5.x 内核 -\u0026gt; 下一步\n根据自己情况选择安装位置 -\u0026gt; 下一步\n根据自己情况自行配置 , 也可后期更改 -\u0026gt; 下一步\n这里选择 NAT 连接方式 -\u0026gt; 下一步\n默认即可 -\u0026gt; 下一步\n视情况而定 , 这里选择 20G -\u0026gt; 下一步\n一直下一步直到出现完成界面 -\u0026gt; 完成\n更改启动模式 在虚拟机详情页面 ，点击进入虚拟机设置 ，进入 选项 选项卡 ，点击 高级 选项 ，在 固件类型 处选择 UEFI ，点击确定\nArch安装 安装菜单页面 开启刚创建的虚拟机\n这里选择 Arch Linux install medium, 敲回车[Enter]进入\n等待\u0026hellip;\u0026hellip; 进入Live默认Shell\n出现这个就代表进入成功了 ，如果没有进入 ，就要考虑是否镜像下载完整了\n键盘布局 初始键盘布局是标准的 QWERTY 布局 ，如果想更改布局 ，则输入以下命令查看支持的布局\nls /usr/share/kbd/keymaps/**/*.map.gz\n设置键盘布局为以下命令\nloadkeys 布局名称\n这里并不更改布局 ，进行下一步的安装\n验证启动模式 验证启动模式来为后面的 GRUB 引导安装做准备 ，输入以下命令\nls /sys/firmware/efi/efivars\n若正确显示为以下界面 ，则表示系统以 UEFI 模式启动 ，若提示目录不存在，则可能以 BIOS 或 CSM 等模式启动 ，本教程是以 UEFI 模式为基础的\n网络连接 虚拟机启动了 NAT 模式 ，所以默认是直接连接了网络的 ， 可以执行 ip link 命令查看网络信息 ， 执行 ping 命令查看网络连通情况\n时间校正 输入以下命令来确保系统时间准确\ntimedatectl set-ntp true\n可以使用 timedatectl status 来查看时间状态\n硬盘分区 分区是很重要的 ，这里也有几个坑\n建立分区 这里使用 fdisk 工具来建立分区\n输入 fdisk -l 查看硬盘信息 ，其中以 loop/rom/airoot 结尾的可以省略\n这里我的硬盘被识别并命名为 /dev/sda ， 记好这个名称 ， 接下来将在这块硬盘上进行分区\n输入 fdisk /dev/sda 进入分区命令界面 ， 可以输入 m 查看命令帮助\n这里输入 g 新建 GPT 分区表\n输入 n 来新建分区 ， 第一个分区我们把它作为一个 EFI 系统分区\n分区标识默认1即可 [Enter]， 分区开始 ，这里我们输入 2048 ，敲击回车\n结束标识 ，可以直接输入分区大小 ， boot分区不需要太大 ， 输入 +500M 即可 ，第一个分区建立完毕。\n接下来建立第二个分区 ， 我们把它作为 SWAP 交换空间的分区 ，可以理解为 win 的虚拟内存 , 依旧输入 n ，分区标识这里选择 3 ，因为我们打算 2 来作为主分区的标识 ，起始标识默认即可 ， 结束标识因为是作为交换空间来使用 ， 所以可以适当设置大一些 ，至此第二个分区建立完毕\n接下来建立主分区 ，输入 n ，分区标识默认 2 ，起始标识默认 ， 结束标识默认直到最后 ，至此三个分区全部建立完毕\n输入 w 来保存并退出分区\n可以再执行 fdisk -l 查看分区情况 ， 可以看到多出了三个新建的分区\n设置文件系统类型 接下来设置每个分区的文件系统与格式化\n这里注意: EFI系统分区的文件系统必须是FAT32的系统 ，如果是其他类型的系统 ， 会导致 GRUB 安装失败\n首先格式化 EFI 系统分区 ，输入 mkfs.fat -F32 /dev/sda1 来设置分区系统类型为 FAT32 并格式化\n接下来格式化并设置 SWAP 分区 ，输入 mkswap /dev/sda3 来初始化 SWAP 分区 ，接着输入 swapon /dev/sda3 激活 SWAP\n最后格式化主分区 ， 输入 mkfs.ext4 /dev/sda2 格式化并设置主分区格式\n挂载分区 接下来进行分区挂载 ， 首先将主分区挂载到 /mnt 目录 ，这也是根目录\nmount /dev/sda2 /mnt\n进行 EFI 系统分区 挂载\n1 2 mkdir /mnt/efi mount /dev/sda1 /mnt/efi 执行 lsblk 查看挂载情况\nSWAP 分区会自动挂载 ，所以无需设置\n安装系统镜像和软件包 设置源 因为不可抗力的情况 ，国内使用默认源会出现下载缓慢的情况 ，所以要设置国内源 ，比如清华源等 ，这里编辑 /etc/pacman.d/mirrorlist 可以设置国内镜像源 ， 这里我们添加清华源\n1 2 3 4 5 vim /etc/pacman.d/mirrorlist 添加一条记录 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch 更新源 pacman -Syy 安装软件包 使用 pacstrap 脚本 ， 安装 base 软件包和 linux 内核等等 ，新版Arch不带Vim等软件 ，所以也建议安装上 ，以及 dhcpcd , haveged 等\n最基本的套件为\n1 pacstrap /mnt base linux linux-firmware 可以直接执行我这条指令\n1 pacstrap /mnt base base-devel linux linux-firmware dhcpcd haveged 等待下载与安装完成 ，安装完成后进入系统配置\n系统配置 生成 fstab 文件\n1 2 genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab cat /mnt/etc/fstab Chroot 进入新安装的系统\n1 arch-chroot /mnt 语言与时区设置 设置时区 1 2 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime hwclock --systohc 设置语言地区 1 2 3 4 5 6 7 8 9 10 vim /etc/locale.gen 找到需要的地区语言 ，将注释移除 如: en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 执行 locale-gen 生成locale信息 创建 locale.conf 文件 ，并添加 LANG=en_US.UTF-8 也可设置为中文 ，视情况而定 网络配置 编辑主机名称\n1 2 vim /etc/hostname XXX 编辑 hosts 添加\n1 2 3 4 127.0.0.1\tlocalhost ::1\tlocalhost 127.0.0.1\tXXX.localdomain XXX # 其中XXX为上一步创建的主机名 设置 dhcpcd / haveged 开机启动\ndhcpcd 会自动分配ip\nhaveged 会在开机时自动搜集 系统熵 解决开机启动缓慢的问题\n1 2 systemctl enable dhcpcd systemctl enable haveged 用户设置 设置 root 密码\n1 passwd 添加一个用户并设置权限与密码\n1 2 3 4 5 # useradd -m -g users -s /bin/bash XXX passwd XXX vim /etc/sudoers 在 root ALL=(ALL) ALL 下添加一句 XXX ALL=(ALL) ALL 安装GRUB引导 安装 grub 和 efibootmgr 软件包\n1 pacman -S grub efibootmgr GRUB 安装 安装前使用 uname -a 查看自己的系统架构\n1 2 3 grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB # 注意 # --target后为你的系统架构 ，如我的为x86_64 ，--efi-directory后为你的 EFI系统分区地址 此处有一个小坑 ，若你的 EFI 系统分区 不是fat32类型 ， 就会安装失败\n如果为fat32仍安装失败 ， 可以用 gdisk 将分区设置 ef00\n如图所示 ， 即为安装完成\n生成配置文件 1 grub-mkconfig -o /boot/grub/grub.cfg 安装完成 退出新系统 , 重启\n1 2 exit reboot 进入新系统 ，开始愉快玩耍 使用AUR 既然用上了 Arch 不能不来用一下 AUR ，AUR 工具很多 ，这里选择 yay\n首先添加 pacman 的 archlinuxcn 源\n修改 /etc/pacman.conf ，在最后添加以下内容\n1 2 [archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 执行 pacman -Syy 更新源\n安装 archlinuxcn-keyring 来导入 GPG key\n安装 yay\n1 pacman -S yay 配置 AUR 源\n1 yay --aururl \u0026#34;https://aur.tuna.tsinghua.edu.cn\u0026#34; --save 剩下的就是愉快的安装软件与配置 ，接下来会更新美化 、配置等教程\n几个坑点 EFI 系统分区必须要是 FAT32 格式 新版arch貌似在安装后不包括 dhcpcd ，所以在执行安装安装脚本时请安装 dhcpcd 服务 ，否则只能进入 LiveCD 安装了 如果安装后开机启动缓慢 ，只停留一个界面光标闪烁 ，这是搜集系统熵的问题 ， 安装 haveged 并开启服务可解决 archlinux-keyring 安装失败 ，并提示 could not be locally signed(无法在本地签署) ， 请看这里 2020年8月11日\nby \u0026mdash;笑的心酸\n","date":"2020-08-10T23:23:10Z","permalink":"https://mnmnmssd.github.io/p/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E7%9A%84archlinux-%E5%AE%89%E8%A3%85%E5%AE%9E%E5%BD%95/","title":"虚拟机下的ArchLinux 安装实录(一)"},{"content":"关于新版Windows Terminal 简介 Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，还可以用于创建你自己的主题并自定义文本、颜色、背景和快捷键绑定。 下载与安装 下载途径有两种： 需要系统版本190X及以上 可在微软商店内搜索下载 亦可在GitHub发布页下载 需要注意：git处有两种版本 第一个为预览版 ，第二个为稳定版，请自行选择下载 安装界面如图(因为我这里已经安装了所以显示为启动，正常应为安装): 美化准备工作 PowerShell7 良好的网络环境 PowerShell7安装 在PowerShell处选择对应系统下载 其中LTS为长期更新版本, stable 稳定版本，preview预览版本\n将Terminal添加到右键菜单 这里有两种方式修改:\n通过修改注册表(不推荐) 使用git上的一键脚本配置 这里着重说明一下第二种方式(下列操作默认管理员身份运行) 点击一键脚本跳转页面 注意需要PowerShell版本为7 可下载install.sp1文件然后在PowerShell7中找到文件执行命令 .\\install.ps1 亦可采用git页面给出的命令安装\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://raw.githubusercontent.com/lextm/windowsterminal-shell/master/install.ps1\u0026#39;)) 注意：可能会报下列错误\n.\\install.ps1: File C:\\Users\\lenovo\\Desktop\\install.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.\n这是因为PowerShell默认执行权限的问题,此时只需打开PowerShell输入下列命令即可:\n1 set-ExecutionPolicy RemoteSigned Windows Terminal配置文件更改 打开Windows Terminal，点击标题栏小三角，打开设置页面 目前官方仍未更新GUI页面，所以打开为一个JSON文件 将PowerShell7添加至Windows Terminal启动菜单 在配置文件中修改以下属性 属性名称:list 在其中添加:\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;guid\u0026#34;: \u0026#34;{574e775e-4f2a-5b96-ac1e-a2962a402336}\u0026#34;, //程序对应的guid属性唯一值 \u0026#34;hidden\u0026#34;: false, //是否在启动列表隐藏 \u0026#34;name\u0026#34;: \u0026#34;pwsh7\u0026#34;, //启动列表名称 \u0026#34;tabTitle\u0026#34;: \u0026#34;pwsh7\u0026#34;, //选项卡标题名称 \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.PowershellCore\u0026#34;, //这会存储源自配置文件的配置文件生成器的名称 \u0026#34;startingDirectory\u0026#34;: \u0026#34;.\u0026#34;, //加载 shell 时所处的起始目录 这一步一定要设为\u0026#39;.\u0026#39;，否则会影响后续操作 \u0026#34;historySize\u0026#34;: 9001, //历史记录大小 \u0026#34;commandline\u0026#34;: \u0026#34;C:/Program Files/PowerShell/7/pwsh.exe -nologo\u0026#34;, //配置文件中使用的可执行文件 \u0026#34;snapOnInput\u0026#34;: true //键入时滚动到输入行 } 其中guid生成可以点击此处\n修改默认启动shell 此时我们修改默认的启动shell为新安装的PowerShell7\n属性名称: defaultProfile 属性值: 对应shell的guid属性\n将此值改为我们上方设置的PowerShell7的guid\n修改字体，背景及配色方案等 在profiles 属性下的 defaults属性中添加/修改些默认参数:\n1 2 3 4 5 6 7 8 { \u0026#34;acrylicOpacity\u0026#34;: 0.25, //设置背景模糊度 \u0026#34;useAcrylic\u0026#34;: true, //开启背景毛玻璃效果 \u0026#34;colorScheme\u0026#34;: \u0026#34;Monokai Night\u0026#34;, //设置配色方案，需要搭配后面的配色方案使用 \u0026#34;suppressApplicationTitle\u0026#34;:true, //启动自定义选项卡标题 \u0026#34;fontSize\u0026#34;: 11, //字体大小 \u0026#34;fontFace\u0026#34;: \u0026#34;Fira Code\u0026#34;, //设置字体 } 字体修改： 选择喜欢的字体下载(最好是支持PowerLine的，否则后续会出现字符渲染的问题) 这里以Fira Code字体为例 点击此处开始下载Fira Code 安装好字体后，在defaults属性中添加\u0026quot;fontFace\u0026quot;: \u0026quot;Fira Code\u0026quot;值\n配色方案修改: 下方网址寻找喜欢的配色方案 terminalsplash atomcorp 多种配色方案，此处以第一个网址为例，进入后等待加载完毕 选择喜欢的配色方案，点击code 复制弹出的代码 粘贴至配置文件的schemes属性中 如\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026#34;schemes\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;Monokai Night\u0026#34;, //配色方案名称 \u0026#34;background\u0026#34;: \u0026#34;#1f1f1f\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#f8f8f8\u0026#34;, \u0026#34;black\u0026#34;: \u0026#34;#1f1f1f\u0026#34;, \u0026#34;blue\u0026#34;: \u0026#34;#6699df\u0026#34;, \u0026#34;cyan\u0026#34;: \u0026#34;#e69f66\u0026#34;, \u0026#34;green\u0026#34;: \u0026#34;#a6e22e\u0026#34;, \u0026#34;purple\u0026#34;: \u0026#34;#ae81ff\u0026#34;, \u0026#34;red\u0026#34;: \u0026#34;#f92672\u0026#34;, \u0026#34;white\u0026#34;: \u0026#34;#f8f8f2\u0026#34;, \u0026#34;yellow\u0026#34;: \u0026#34;#e6db74\u0026#34;, \u0026#34;brightBlack\u0026#34;: \u0026#34;#75715e\u0026#34;, \u0026#34;brightBlue\u0026#34;: \u0026#34;#66d9ef\u0026#34;, \u0026#34;brightCyan\u0026#34;: \u0026#34;#e69f66\u0026#34;, \u0026#34;brightGreen\u0026#34;: \u0026#34;#a6e22e\u0026#34;, \u0026#34;brightPurple\u0026#34;: \u0026#34;#ae81ff\u0026#34;, \u0026#34;brightRed\u0026#34;: \u0026#34;#f92672\u0026#34;, \u0026#34;brightWhite\u0026#34;: \u0026#34;#f8f8f2\u0026#34;, \u0026#34;brightYellow\u0026#34;: \u0026#34;#e6db74\u0026#34; }] 修改默认配色方案colorScheme属性值为自定义的配色方案名称\n背景修改： 开启背景毛玻璃效果 1 2 \u0026#34;acrylicOpacity\u0026#34;: 0.25, //设置背景模糊度 \u0026#34;useAcrylic\u0026#34;: true, //开启毛玻璃效果 设置背景图片 1 2 3 4 5 \u0026#34;backgroundImage\u0026#34;:\u0026#34;图片路径\u0026#34;, \u0026#34;backgroundImageStretchMode\u0026#34;:\u0026#34;背景拉伸\u0026#34;, //可选属性: \u0026#34;none\u0026#34;、\u0026#34;fill\u0026#34;、\u0026#34;uniform\u0026#34;、\u0026#34;uniformToFill\u0026#34; \u0026#34;backgroundImageAlignment\u0026#34;:\u0026#34;背景对齐方式\u0026#34;,//可选属性: \u0026#34;center\u0026#34;、\u0026#34;left\u0026#34;、\u0026#34;top\u0026#34;、\u0026#34;right\u0026#34;、\u0026#34;bottom\u0026#34;、 //\u0026#34;topLeft\u0026#34;、\u0026#34;topRight\u0026#34;、\u0026#34;bottomLeft\u0026#34;、\u0026#34;bottomRight\u0026#34; \u0026#34;backgroundImageOpacity\u0026#34;:\u0026#34;背景不透明度\u0026#34;, //0-1 其他属性如滚动条，光标颜色等可参考官方文档链接 PowerShell配置 新版的PowerShell虽然功能更新不少，但默认的操作和界面比较不耐看，此时我们便需要借助一些插件来完善他\nPowerShell插件配置 使用管理员身份打开PowerShell 依次输入下方三个命令安装插件\n1 2 3 Install-Module -Name PSReadLine -AllowPrerelease -Force Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser 然后输入以下命令来配置插件\n1 notepad.exe $PROFILE 这会打开默认PowerShell 的启动配置文件，如果提示没有该文件，点击创建就好 在打开的文件中输入\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 引入 posh-git Import-Module posh-git # 引入 oh-my-posh Import-Module oh-my-posh #引入 PSReadLine Import-Module PSReadLine # 设置 PowerShell 主题 Set-Theme Paradox #设置 Tab 键补全 Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete # 设置 Ctrl+d 为退出 PowerShell Set-PSReadlineKeyHandler -Key \u0026#34;Ctrl+d\u0026#34; -Function ViExit # 设置 Ctrl+z 为撤销 Set-PSReadLineKeyHandler -Key \u0026#34;Ctrl+z\u0026#34; -Function Undo # 设置向上键为后向搜索历史记录 Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向下键为前向搜索历史纪录 Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward 亦可参考官方样例来自行修改\n使PowerShell支持git bash 此时修改的已经差不多了，但PowerShell的git功能仍有一些缺陷 我们需要修改环境变量，使PowerShell更上一层楼 将git Bash目录下的usr/bin路径复制进去就好了\n后记 这是我的第一篇文章，自微软Bulid 2019以来，宣布新的终端Windows Terminal，我就一直在关注，并第一时间下下来使用，那时的Windows Terminal充满bug，动不动就会闪退，蛋疼的操作，蛋疼的配置，让我着实没能香起来，最近Bulid 2020大会，微软正式推出Windows Terminal 1.0正式版，迫不及待下载后，一个字，香，两个字，真香，虽然还有一些小瑕疵，譬如图形化配置界面，还整json文件呢，真就人均极客了嗷。并没有使用过cmder、Xshell等第三方终端，所以以上观点仅代表个人审美。溜了溜了\n顺便这篇文章的生成与发布均使用新版Windows Terminal\n参考文献: 微软官方文档 如何打造好看还好用的 Windows Terminal\u0026mdash;ChrAlpha 5 个 PowerShell 主题，让你的 Windows 终端更好看\u0026mdash;少数派\n","date":"2020-06-09T10:14:58Z","permalink":"https://mnmnmssd.github.io/p/windows-terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/","title":"新版Windows Terminal美化配置"}]