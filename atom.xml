<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笑的心酸</title>
  
  <subtitle>人之初 性本善</subtitle>
  <link href="http://121.89.216.198/atom.xml" rel="self"/>
  
  <link href="http://121.89.216.198/"/>
  <updated>2022-03-04T10:09:20.043Z</updated>
  <id>http://121.89.216.198/</id>
  
  <author>
    <name>心酸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次被迫反编译加中间人攻击</title>
    <link href="http://121.89.216.198/2022/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A2%AB%E8%BF%AB%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8A%A0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    <id>http://121.89.216.198/2022/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A2%AB%E8%BF%AB%E5%8F%8D%E7%BC%96%E8%AF%91%E5%8A%A0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</id>
    <published>2022-03-04T09:12:47.000Z</published>
    <updated>2022-03-04T10:09:20.043Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Mar 04 2022 18:09:50 GMT+0800 (香港标准时间) --><h1 id="0x00-事件起因"><a href="#0x00-事件起因" class="headerlink" title="0x00 事件起因"></a>0x00 事件起因</h1><p>最近在搞毕设，其中有一个模块需要用到人脸识别服务，遂去网上寻找现成的轮子，终于在某慕课平台上发现了一款简单的人脸识别框架，其使用cython编写并编译成C代码，借助Flask框架实现Web服务。下载运行的过程此处不多细说。</p><p>运行十分顺利，docker一键部署即可，结果在调用其生成的服务接口时出现问题，其应返回一串由python生成的人脸模型字符串，结果他给我返回了个<code>icode不正确</code>，经查询发现，其还需要向慕课后台传递一串随机<code>code</code>，此code只有购买该课程的人才能生成并有时效性，奈何本人囊中羞涩，实在付不起昂贵的课程费用，于是动起了小心思。</p><h1 id="0x01-返本溯源"><a href="#0x01-返本溯源" class="headerlink" title="0x01 返本溯源"></a>0x01 返本溯源</h1><p>既然我都有了该人脸识别程序，为何不从其源码入手呢，所以打开下载的源码包，结果发现是一个由<code>cython</code>编译生成的C文件与一个编译生成的<code>SO</code>二进制文件，打开c文件，由python编译后的c代码属实是晦涩难懂，不过经过层层分析，还是找到了相应的检查code代码，但是却无从下手，因为编译后的代码是这样的</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304172837229.png" alt="image-20220304172837229"></p><p>我透，这尼玛怎么改，直接放弃！</p><h1 id="0x02-偷天换日"><a href="#0x02-偷天换日" class="headerlink" title="0x02 偷天换日"></a>0x02 偷天换日</h1><p>虽然无法修改，但是依然发现了一个值得注意的点，就是提交的这个code会在服务内请求某慕课服务器做验证，根据返回值再次验证，最后在返回给我们，既然如此，我们拦截这个验证code的请求，然后修改它的响应包不就可以了，由于该服务运行在<code>linux</code>上，所以需要寻找一个适用于linux，并且能够自动监听指定URL，自动修改响应包的一个软件，毕竟我没有功夫每一次请求都自己手动修改。于是，<code>mitmproxy</code>出现了</p><blockquote><p>顾名思义，mitmproxy 就是用于 MITM 的 proxy，MITM 即<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">中间人攻击</a>（Man-in-the-middle attack）。用于中间人攻击的代理首先会向正常的代理一样转发请求，保障服务端与客户端的通信，其次，会适时的查、记录其截获的数据，或篡改数据，引发服务端或客户端特定的行为。</p><p>不同于 fiddler 或 wireshark 等抓包工具，mitmproxy 不仅可以截获请求帮助开发者查看、分析，更可以通过自定义脚本进行二次开发。举例来说，利用 fiddler 可以过滤出浏览器对某个特定 url 的请求，并查看、分析其数据，但实现不了高度定制化的需求，类似于：“截获对浏览器对该 url 的请求，将返回内容置空，并将真实的返回内容存到某个数据库，出现异常时发出邮件通知”。而对于 mitmproxy，这样的需求可以通过载入自定义 python 脚本轻松实现。</p></blockquote><p>没错，它可以运行自己写的python脚本实现自动化抓包改包，直接上手使用，具体安装教程可以查看官方文档，需要注意的是如果拦截<code>https</code>请求需要安装认证证书，我在这里说一下ubuntu/Debian的安装方法</p><ol><li><p>在以下位置为额外的 CA 证书创建一个目录<code>/usr/local/share/ca-certificates</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/local/share/ca-certificates/extra</span><br></pre></td></tr></table></figure></li><li><p>首先将<code>mitmproxy</code>自带的.<strong>pem</strong>文件转换为<code>.crt</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pem文件在~/.mitmproxy文件夹内，后缀名为.pem</span></span><br><span class="line">openssl x509 -in foo.pem -inform PEM -out foo.crt</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>将 CA<code>.crt</code>文件复制到此目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp foo.crt /usr/local/share/ca-certificates/extra/foo.crt</span><br></pre></td></tr></table></figure></li><li><p>让 Ubuntu 添加相对于的文件<code>.crt</code>路径：<code>/usr/local/share/ca-certificates``/etc/ca-certificates.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure ca-certificates</span><br><span class="line"><span class="meta">#</span><span class="bash"> 要以非交互方式执行此操作，请运行：</span></span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure></li></ol><p>这样下来，就安装好了证书，然后简单的写一个脚本文件（直接把官方示例脚本修改修改完事）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitmproxy.http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.num=<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, flow: mitmproxy.http.HTTPFlow)</span>:</span></span><br><span class="line">        self.num+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(self, flow: mitmproxy.http.HTTPFlow)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"XXX.com"</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">            <span class="keyword">import</span> json</span><br><span class="line">            flow.response.set_text(json.dumps(&#123;<span class="string">"msg"</span>:<span class="string">"success"</span>,<span class="string">"data"</span>:<span class="string">"success"</span>,<span class="string">"code"</span>:<span class="number">1000</span>&#125;))</span><br><span class="line">            data = json.loads(str(flow.response.content, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">            ctx.log.info(<span class="string">"data = &#123;&#125;"</span>.format(data))</span><br><span class="line"> </span><br><span class="line">addons = [</span><br><span class="line">    Counter()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后修改系统代理为<code>127.0.0.1:8080</code>，输入<code>mitmdump -s test.py</code>命令启动，使用curl命令简单测一下，非常ok</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175353190.png" alt="image-20220304175353190"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175310498.png" alt="image-20220304175310498"></p><p>可以看到日志输出，已经成功拦截并修改响应了，直接上实机运行！</p><h1 id="0x03-攻营拔寨"><a href="#0x03-攻营拔寨" class="headerlink" title="0x03 攻营拔寨"></a>0x03 攻营拔寨</h1><p>前端发起请求，后端处理请求，嗯？怎么返回了500，看一看日志输出</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304175637550.png" alt="image-20220304175637550"></p><p>我好不容易动心一次，你却让我输的如此彻底！焯！！</p><p>明明已经配置好了CA证书，curl命令请求https的域名也通过了，为什么到这里却失败了呢，继续查看源代码，忽然想起这是由python编译而来的C代码，运行也是由python3运行，会不会是python内部出了问题，于是百度一下后，发现果然，因为有代理的存在，所以python的request库还需要一步CA认证，解决方法就是关掉代理，焯！这不是绕了一圈又回到原点了嘛。既然拦截和源码都靠不住，我就盯上了它的运行文件<code>xx.so</code>，他是由cython编译生成的so文件库，主要运行就是运行它，直接记事本打开，好嘛，直接乱码，百度了一下知道了他是二进制文件，那么就使用对二进制宝器—<code>IDA</code>，直接反编译so文件，修改内部参数不就可以了。</p><p>使用IDA打开so文件，找到其中的请求地址，然后修改它，将https请求修改为http请求，万幸他没有做跳转，http请求正常使用<img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180406016.png" alt="image-20220304180406016"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180517271.png" alt="image-20220304180517271"></p><p>再次实机运行，一切完美</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20220304180643723.png" alt="image-20220304180643723"></p><h1 id="0x04-END"><a href="#0x04-END" class="headerlink" title="0x04 END"></a>0x04 END</h1><p>其实最后都可以修改内部参数，完全可以将请求的路径修改为本地路径，本地在搭建个小服务器返回正确的响应就好，一些软件的破解也是这么做的，或者修改其中验证code函数的返回值都i是可以的。为了搞这个服务，把好多年扔下的反编译老底都掏出来了，还是希望有能力的人可以支持正版，支持他人的劳动成果吧！</p><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Fri Mar 04 2022 18:09:50 GMT+0800 (香港标准时间) --&gt;&lt;h1 id=&quot;0x00-事件起因&quot;&gt;&lt;a href=&quot;#0x00-事件起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 事件起因&quot;&gt;&lt;/a&gt;0x00 事件起因&lt;/h1&gt;&lt;p&gt;最近在搞毕设，其中有一个模块需要用到人脸识别服务，遂去网上寻找现成的轮子，终于在某慕课平台上发现了一款简单的人脸识别框架，其使用cython编写并编译成C代码，借助Flask框架实现Web服务。下载运行的过程此处不多细说。&lt;/p&gt;&lt;p&gt;运行十分顺利，docker一键部署即可，结果在调用其生成的服务接口时出现问题，其应返回一串由python生成的人脸模型字符串，结果他给我返回了个&lt;code&gt;icode不正确&lt;/code&gt;，经查询发现，其还需要向慕课后台传递一串随机&lt;code&gt;code&lt;/code&gt;，此code只有购买该课程的人才能生成并有时效性，奈何本人囊中羞涩，实在付不起昂贵的课程费用，于是动起了小心思。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>期末博客系统扩展</title>
    <link href="http://121.89.216.198/2021/10/27/%E6%9C%9F%E6%9C%AB%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95/"/>
    <id>http://121.89.216.198/2021/10/27/%E6%9C%9F%E6%9C%AB%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95/</id>
    <published>2021-10-27T12:42:47.000Z</published>
    <updated>2021-10-27T12:44:32.955Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Oct 27 2021 20:44:54 GMT+0800 (中国标准时间) --><h1 id="Spring-boot-扩展-博客系统"><a href="#Spring-boot-扩展-博客系统" class="headerlink" title="Spring boot (扩展)博客系统"></a>Spring boot (扩展)博客系统</h1><h2 id="主要扩展功能"><a href="#主要扩展功能" class="headerlink" title="主要扩展功能"></a>主要扩展功能</h2><p><code>在老师已有基础上扩展</code></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211019211243949.png" alt="image-20211019211243949"></p><h2 id="0x00评论管理"><a href="#0x00评论管理" class="headerlink" title="0x00评论管理"></a>0x00评论管理</h2><ul><li>效果图（前端页面由文章管理页面更改部分参数而成）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211019211832076.png" alt="效果图"></p><p>分析效果图，至少需要实现以下两功能</p><ul><li>点击<code>评论管理</code>进入评论管理页面，并显示全部评论</li><li>可以对单一评论进行操作，并且点击评论可以跳转对应文章</li></ul><p>分析效果图，分析得到的功能由Controller层承担的，由此开始向下分析</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211019213430107.png" alt="image-20211019213430107"></p><h3 id="显示全部评论"><a href="#显示全部评论" class="headerlink" title="显示全部评论"></a>显示全部评论</h3><h4 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h4><ul><li>CommentMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有评论，按照新发布进行排序</span></span><br><span class="line"><span class="function">List&lt;Comment&gt; <span class="title">selectComments</span><span class="params">()</span> </span>;</span><br></pre></td></tr></table></figure><ul><li>CommentMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectComments"</span> <span class="attr">resultType</span>=<span class="string">"com.example.blog_system.entity.Comment"</span>&gt;</span></span><br><span class="line">  select * from t_comment order by id desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><ul><li>CommentServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;Comment&gt; <span class="title">getAllComments</span><span class="params">( <span class="keyword">int</span> page, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    PageHelper.startPage(page, count);</span><br><span class="line">    List&lt;Comment&gt; comments = commentMapper.selectComments();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(comments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><ul><li>AdminController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/comments"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">commentsManage</span><span class="params">(@RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> page,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"count"</span>, defaultValue = <span class="string">"10"</span>)</span> <span class="keyword">int</span> count, HttpServletRequest request) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;Comment&gt; comments = commentService.getAllComments(page, count);</span><br><span class="line">    request.setAttribute(<span class="string">"comments"</span>, comments);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"back/comments_list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对评论进行操作"><a href="#对评论进行操作" class="headerlink" title="对评论进行操作"></a>对评论进行操作</h3><h4 id="Mapper层-1"><a href="#Mapper层-1" class="headerlink" title="Mapper层"></a>Mapper层</h4><ul><li>CommentMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>CommentMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByAid"</span>&gt;</span></span><br><span class="line">  delete from t_comment</span><br><span class="line">  where article_id = #&#123;aid, jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Service层-1"><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h4><ul><li>CommentServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteComment</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    commentMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller层-1"><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h4><ul><li>AdminController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/comments/delete"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">deleteComment</span><span class="params">(@RequestParam <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        commentService.deleteComment(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseData.ok();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseData.fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01标签-分类"><a href="#0x01标签-分类" class="headerlink" title="0x01标签/分类"></a>0x01标签/分类</h2><ul><li>效果图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211019214913227.png" alt="image-20211019214913227"></p><p>分析该效果图，可知主要元素为中间展示的<code>词云</code>部分，该<code>词云</code>以分类权重为标识，权重越大，字符越大，在此处我们使用外部js库实现。</p><h4 id="JQcloud库"><a href="#JQcloud库" class="headerlink" title="JQcloud库"></a>JQcloud库</h4><p>我们借助外部库来实现<code>词云</code>效果，这里简单介绍一下<code>JQcloud</code>库，他是一个基于<code>Jquery</code>的简单易用的词云生成库，通过阅读他的<a href="https://github.com/lucaong/jQCloud" target="_blank" rel="noopener">官方文档</a>我们可以得知它接受对象数组类型的参数,主要参数有</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>text</td><td>主要参数，这里用分类名</td></tr><tr><td>weight</td><td>权重，只用分类下的文章数</td></tr><tr><td>link</td><td>跳转链接</td></tr></tbody></table><p>使用其内置方法添加词云</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#example"</span>).jQCloud(word_array);</span><br></pre></td></tr></table></figure><p>根据以上数据，我们分析得到的信息</p><ul><li>后台需要传过来分类的类别名，权重，链接等</li><li>前端接收数据并通过<code>JQcloud</code>渲染词云</li></ul><p>通过分析，我们新建一个<code>Tag</code>实体类，并以此延申其的<code>Service层</code>、<code>Mapper层</code>等</p><ul><li>Tag类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.blog_system.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 笑的心酸 - Red4Lion - mnmnmssd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021.10.19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">private</span> String link;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLink</span><span class="params">(String link)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.link = link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示所有分类"><a href="#显示所有分类" class="headerlink" title="显示所有分类"></a>显示所有分类</h3><h4 id="Mapper层-2"><a href="#Mapper层-2" class="headerlink" title="Mapper层"></a>Mapper层</h4><ul><li>TagsMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取全部分类详细信息</span></span><br><span class="line"><span class="function">List&lt;Tag&gt; <span class="title">selectCounts</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>TagsMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCounts"</span> <span class="attr">resultType</span>=<span class="string">"com.example.blog_system.entity.Tag"</span>&gt;</span></span><br><span class="line">    SELECT categories as text, COUNT(categories) as weight</span><br><span class="line">    FROM `t_article` GROUP BY categories</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Service层-2"><a href="#Service层-2" class="headerlink" title="Service层"></a>Service层</h4><ul><li>tagsService</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Tag&gt; getTagsCount() &#123;</span><br><span class="line">    List&lt;Tag&gt; tags &#x3D; tagsMapper.selectCounts();</span><br><span class="line">    tags.replaceAll(tag -&gt; &#123;</span><br><span class="line">        tag.setLink(&quot;tags&#x2F;&quot; + tag.getText());</span><br><span class="line">        return tag;</span><br><span class="line">    &#125;);</span><br><span class="line">    return tags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller层-2"><a href="#Controller层-2" class="headerlink" title="Controller层"></a>Controller层</h4><ul><li>Admincontroller</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;tags&quot;)</span><br><span class="line">public String toTags(HttpServletRequest request, Model model) &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Tag&gt; tagList &#x3D; iTagsService.getTagsCount();</span><br><span class="line">    model.addAttribute(&quot;tagList&quot;, tagList);</span><br><span class="line"></span><br><span class="line">    return &quot;back&#x2F;tags&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p>从官方git主页下载<code>JQcloud</code>库并放入<code>static/back/js(css)/</code>下</p></li><li><p>引入必备库</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:src=<span class="string">"@&#123;http://apps.bdimg.com/libs/jquery/1.9.1/jquery.min.js&#125;"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;link th:href="@&#123;/</span>back/css/jqcloud.css&#125;<span class="string">" rel="</span>stylesheet<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;script th:src="</span>@&#123;/back/js/jqcloud<span class="number">-1.0</span><span class="number">.4</span>.min.js&#125;<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>页面布局</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"back/header::header-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">" back/footer :: footer-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"back/footer :: footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JQcloud渲染数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=<span class="string">"javascript"</span> type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> tagList = [[$&#123;tagList&#125;]];</span><br><span class="line">    <span class="built_in">console</span>.log(tagList)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> word_array = tagList</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#example"</span>).jQCloud(word_array, &#123;</span><br><span class="line">            height: <span class="number">850</span> <span class="comment">//设置生成词云的高度</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单独显示某一分类下文章"><a href="#单独显示某一分类下文章" class="headerlink" title="单独显示某一分类下文章"></a>单独显示某一分类下文章</h3><p>用户点击某一分类后跳转到该分类下所有文章列表</p><ul><li>效果图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211020143758198.png" alt="image-20211020143758198"></p><p>分析该效果图，可得知需向后台传递分类参数，后台返回分类下所有文章列表</p><h4 id="Mapper层-3"><a href="#Mapper层-3" class="headerlink" title="Mapper层"></a>Mapper层</h4><ul><li>TagsMapper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某一分类下的文章</span></span><br><span class="line"><span class="function">List&lt;Article&gt; <span class="title">selectArticleByTag</span><span class="params">(String categories)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>TagsMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectArticleByTag"</span> <span class="attr">resultType</span>=<span class="string">"com.example.blog_system.entity.Article"</span>  <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> &gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM `t_article`</span><br><span class="line">    where categories = #&#123;categories,jdbcType=VARCHAR&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Service层-3"><a href="#Service层-3" class="headerlink" title="Service层"></a>Service层</h4><ul><li>TagService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;Article&gt; <span class="title">getArticleByTag</span><span class="params">(Integer page, Integer count, String categories)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Article&gt; articles = tagsMapper.selectArticleByTag(categories);</span><br><span class="line">    PageHelper.startPage(page, count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(articles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller层-3"><a href="#Controller层-3" class="headerlink" title="Controller层"></a>Controller层</h4><ul><li>AdminController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"tags/&#123;tag&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showTagsArticles</span><span class="params">(@RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> page,</span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"count"</span>, defaultValue = <span class="string">"10"</span>)</span> <span class="keyword">int</span> count,</span></span><br><span class="line"><span class="function">                               @<span class="title">PathVariable</span><span class="params">(<span class="string">"tag"</span>)</span> String tag, HttpServletRequest request) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;Article&gt; pageInfo = iTagsService.getArticleByTag(page, count, tag);</span><br><span class="line">    request.setAttribute(<span class="string">"tagTitle"</span>, tag);</span><br><span class="line">    request.setAttribute(<span class="string">"articles"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"back/tag_article_list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><p>由文章管理更改而来，不再赘述</p><h4 id="优化发布文章"><a href="#优化发布文章" class="headerlink" title="优化发布文章"></a>优化发布文章</h4><p>由于之前发布文章时没有设置文章分类，导致所有文章分类都是默认分类，所以将其优化。</p><ul><li>效果图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211020145017008.png" alt="image-20211020145017008"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211020145041439.png" alt="image-20211020145041439"></p><p>通过分析上图可得，需要在前端页面添加一个可以输入并且可以选择分类的输入框，选择框可以动态的获取所有分类，输入框可以添加新分类。</p><p>这种可以输入并且可以选择的<code>input</code>输入框初看很新颖，但是我们细细一想就可以得到方案，将输入框定位到选择框上，并且在选择框中内容发生改变时同步到输入框中。于是得到以下代码</p><h5 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h5><ul><li>article_edit.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;null != contents&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"spec_num"</span> <span class="attr">name</span>=<span class="string">"spec_num"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">onchange</span>=<span class="string">"document.getElementById('categories').value=$('#spec_num option:selected').text()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"categories"</span> <span class="attr">id</span>=<span class="string">"categories"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control selectInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">placeholder</span>=<span class="string">"请选择/新建文章分类"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>css部分</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selectInput</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js部分，获取后台数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catoegoriess = [[$&#123;catoegoriess&#125;]];</span><br><span class="line"><span class="comment">//根据id查找对象，</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'spec_num'</span>);</span><br><span class="line"></span><br><span class="line">catoegoriess.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">tag</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//添加一个选项</span></span><br><span class="line">    obj.options.add(<span class="keyword">new</span> Option(tag, tag)); <span class="comment">//这个兼容IE与firefox</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>修改发布文章article.js的提交语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catoegories = $(<span class="string">'#articleForm input[name=categories]'</span>).val()</span><br><span class="line">...</span><br><span class="line">$(<span class="string">"#articleForm #categories"</span>).val(catoegories);</span><br></pre></td></tr></table></figure><h4 id="后台优化分类数据"><a href="#后台优化分类数据" class="headerlink" title="后台优化分类数据"></a>后台优化分类数据</h4><ul><li>Mapper层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取全部分类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTags</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>Service层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tagsMapper.getTags();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller层</li></ul><p>在文章发布api下添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; tags = iTagsService.getTags();</span><br><span class="line">request.setAttribute(<span class="string">"catoegoriess"</span>, tags);</span><br></pre></td></tr></table></figure><h2 id="0x02系统设置"><a href="#0x02系统设置" class="headerlink" title="0x02系统设置"></a>0x02系统设置</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li>效果图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211021165708369.png" alt="image-20211021165708369"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211021165744593.png" alt="image-20211021165744593"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20211021165805221.png" alt="image-20211021165805221"></p><h4 id="遇到的错误及问题"><a href="#遇到的错误及问题" class="headerlink" title="遇到的错误及问题"></a>遇到的错误及问题</h4><p>在开发中遇到了<code>405</code>错误，后端接口一直返回<code>Request method &#39;POST&#39; not supported</code>错误，而在controller中已经声明了前端请求方法为<code>POST</code>，在查询资料与debug中发现，原来起端使用的fetch在请求后端时并没有设置请求头<code>hearder</code>，于是在fetch设置中向请求头中加入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers: &#123;</span><br><span class="line">    "Content-Type":"application/x-www-form-urlencoded"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是仍报<code>405</code>错误，分析请求头信息，发现没有设置用户<code>token</code>导致后台的安全机制认为有用户发起<code>CSRF</code>攻击，所以采取反制措施。于是再次添加请求头信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;meta&gt;标签中封装的_csrf信息</span></span><br><span class="line"><span class="keyword">var</span> token = $(<span class="string">"meta[name='_csrf']"</span>).attr(<span class="string">"content"</span>);</span><br><span class="line"> ...</span><br><span class="line">headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    <span class="string">"x-csrf-token"</span>:token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单了解一下 跨站请求伪造<code>Cross Site Request Forgery（CSRF）</code>，正是如同他的名字一样，当黑客获取用户cookie后，利用此cookie在本地或服务器伪造原网站向后端发起恶意请求。于是为了防范此种行为，<code>token</code>就诞生了，首先他由后端随机生成一串数字并发送给前端，当前端向后端发起请求时，在携带cookie的同时，还要将之前的随机数字串即<code>token</code>一并发送给后端。</p><p>第一步：后端随机产生一个token，把这个token保存在SESSION状态中；同时，后端把这个token交给前端页面；</p><p>第二步：下次前端需要发起请求（比如发帖）的时候把这个token加入到请求数据或者头信息中，一起传给后端；</p><p>第三步：后端校验前端请求带过来的token和SESSION里的token是否一致；</p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><h4 id="删除-修改用户"><a href="#删除-修改用户" class="headerlink" title="删除/修改用户"></a>删除/修改用户</h4><h3 id="个人信息管理"><a href="#个人信息管理" class="headerlink" title="个人信息管理"></a>个人信息管理</h3><h4 id="修改个人信息"><a href="#修改个人信息" class="headerlink" title="修改个人信息"></a>修改个人信息</h4><h3 id="网站信息管理"><a href="#网站信息管理" class="headerlink" title="网站信息管理"></a>网站信息管理</h3><h4 id="修改网站信息"><a href="#修改网站信息" class="headerlink" title="修改网站信息"></a>修改网站信息</h4><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Wed Oct 27 2021 20:44:54 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;Spring-boot-扩展-博客系统&quot;&gt;&lt;a href=&quot;#Spring-boot-扩展-博客系统&quot; class=&quot;headerlink&quot; title=&quot;Spring boot (扩展)博客系统&quot;&gt;&lt;/a&gt;Spring boot (扩展)博客系统&lt;/h1&gt;&lt;h2 id=&quot;主要扩展功能&quot;&gt;&lt;a href=&quot;#主要扩展功能&quot; class=&quot;headerlink&quot; title=&quot;主要扩展功能&quot;&gt;&lt;/a&gt;主要扩展功能&lt;/h2&gt;&lt;p&gt;&lt;code&gt;在老师已有基础上扩展&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="spring" scheme="http://121.89.216.198/tags/spring/"/>
    
    <category term="java" scheme="http://121.89.216.198/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://121.89.216.198/2021/05/14/%E9%9A%8F%E7%AC%94/"/>
    <id>http://121.89.216.198/2021/05/14/%E9%9A%8F%E7%AC%94/</id>
    <published>2021-05-14T02:07:51.000Z</published>
    <updated>2021-05-14T02:25:23.479Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="上课无聊"><a href="#上课无聊" class="headerlink" title="上课无聊"></a>上课无聊</h1><p>写个随笔</p><p>人生短暂</p><p>更要珍惜</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20210514102514900.png" alt="image-20210514102514900"></p><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;上课无聊&quot;&gt;&lt;a href=&quot;#上课无聊&quot; class=&quot;headerlink&quot; title=&quot;上课无聊&quot;&gt;&lt;/a&gt;上课无聊&lt;/h1&gt;&lt;p&gt;写个随笔&lt;/p&gt;&lt;p&gt;人生短暂&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ArchLinux桌面配置实录</title>
    <link href="http://121.89.216.198/2020/08/11/ArchLinux%E6%A1%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E5%AE%9E%E5%BD%95/"/>
    <id>http://121.89.216.198/2020/08/11/ArchLinux%E6%A1%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E5%AE%9E%E5%BD%95/</id>
    <published>2020-08-11T11:22:38.000Z</published>
    <updated>2021-09-15T12:57:01.994Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="ArchLiux-桌面配置实录"><a href="#ArchLiux-桌面配置实录" class="headerlink" title="ArchLiux 桌面配置实录"></a>ArchLiux 桌面配置实录</h1><p>上一期讲了如何安装 <code>ArchLinux</code> ，这一期就来完成他的桌面、输入法、壁纸等配置</p><h2 id="窗口管理器-DWM"><a href="#窗口管理器-DWM" class="headerlink" title="窗口管理器 (DWM)"></a>窗口管理器 (DWM)</h2><p>由于是虚拟机安装 ， 考虑性能等方面 ，桌面方面不采用图形化桌面环境 (<code>KDE</code> 、 <code>GNOME</code> 、 <code>Xfce</code> 等) ，这里采用 <code>窗口管理器</code> 的方式来管理窗口</p><p>窗口管理器方面我选择 <code>DWM</code> ，它是一款轻量级的产品 ，由C编写 ，不敢相信源文件只有 <code>81.4KB</code></p><h2 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……."></a>未完待续…….</h2><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;ArchLiux-桌面配置实录&quot;&gt;&lt;a href=&quot;#ArchLiux-桌面配置实录&quot; class=&quot;headerlink&quot; title=&quot;ArchLiux 桌面配置实录&quot;&gt;&lt;/a&gt;ArchLiux 桌面配置实录&lt;/h1&gt;&lt;p&gt;上一期讲了如何安装 &lt;code&gt;ArchLinux&lt;/code&gt; ，这一期就来完成他的桌面、输入法、壁纸等配置&lt;/p&gt;&lt;h2 id=&quot;窗口管理器-DWM&quot;&gt;&lt;a href=&quot;#窗口管理器-DWM&quot; class=&quot;headerlink&quot; title=&quot;窗口管理器 (DWM)&quot;&gt;&lt;/a&gt;窗口管理器 (DWM)&lt;/h2&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Arch" scheme="http://121.89.216.198/tags/Arch/"/>
    
    <category term="Linux" scheme="http://121.89.216.198/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机下的ArchLinux 安装实录(一)</title>
    <link href="http://121.89.216.198/2020/08/10/ArchLinux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%AE%9E%E5%BD%95-%E4%B8%80/"/>
    <id>http://121.89.216.198/2020/08/10/ArchLinux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%AE%9E%E5%BD%95-%E4%B8%80/</id>
    <published>2020-08-10T15:23:10.000Z</published>
    <updated>2020-08-12T03:10:12.300Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="虚拟机下的ArchLinux-安装实录-一"><a href="#虚拟机下的ArchLinux-安装实录-一" class="headerlink" title="虚拟机下的ArchLinux 安装实录(一)"></a>虚拟机下的ArchLinux 安装实录(一)</h1><h2 id="获取镜像-gt-创建虚拟机"><a href="#获取镜像-gt-创建虚拟机" class="headerlink" title="获取镜像 -&gt; 创建虚拟机"></a>获取镜像 -&gt; 创建虚拟机</h2><h3 id="获取安装镜像"><a href="#获取安装镜像" class="headerlink" title="获取安装镜像"></a>获取安装镜像</h3><p>首先在 <a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">Archlinux.org</a> 处选择适合的镜像与下载方式</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811113135424.png" alt="image-20200811113135424"></p><p>这里选择 <a href="http://mirrors.163.com/archlinux/iso/2020.08.01/" target="_blank" rel="noopener">163</a> 源的下载镜像(ISO)</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150119046.png" alt="image-20200811150119046"></p><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>选择自定义(高级) -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/111.png" alt="image-20200811150218403"></p><p>默认就好 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/2222.png" alt="image-20200811150306980"></p><p>选择刚刚下载好的镜像 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150345665.png" alt="image-20200811150345665"></p><p>操作系统选择 <code>Linux</code> , 版本根据自己下载的内核选择 , 这里选择 <code>5.x</code> 内核 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150517381.png" alt="image-20200811150517381"></p><p>根据自己情况选择安装位置 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150606483.png" alt="image-20200811150606483"></p><p>根据自己情况自行配置 , 也可后期更改 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/3333.png" alt="image-20200811150658662"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/4444.png" alt="image-20200811150713274"></p><p>这里选择 <code>NAT</code> 连接方式 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150821883.png" alt="image-20200811150821883"></p><p>默认即可 -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150844908.png" alt="image-20200811150844908"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150853037.png" alt="image-20200811150853037"></p><p>视情况而定 , 这里选择 <code>20G</code> -&gt; 下一步</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811150944834.png" alt="image-20200811150944834"></p><p>一直下一步直到出现完成界面 -&gt; 完成</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811151034804.png" alt="image-20200811151034804"></p><h3 id="更改启动模式"><a href="#更改启动模式" class="headerlink" title="更改启动模式"></a>更改启动模式</h3><p>在虚拟机详情页面 ，点击进入虚拟机设置 ，进入 <code>选项</code> 选项卡 ，点击 <code>高级</code> 选项 ，在 <code>固件类型</code> 处选择 <code>UEFI</code> ，点击确定</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/5555.png" alt="image-20200811152442125"></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/6666.png" alt="image-20200811152420629"></p><h2 id="Arch安装"><a href="#Arch安装" class="headerlink" title="Arch安装"></a>Arch安装</h2><h3 id="安装菜单页面"><a href="#安装菜单页面" class="headerlink" title="安装菜单页面"></a>安装菜单页面</h3><p>开启刚创建的虚拟机</p><p>这里选择 <em><code>Arch Linux install medium</code></em>, 敲回车[Enter]进入</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/9999.png" alt="image-20200811152739303"></p><p>等待…… 进入Live默认Shell</p><p>出现这个就代表进入成功了 ，如果没有进入 ，就要考虑是否镜像下载完整了</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811151606159.png" alt="image-20200811151606159"></p><h3 id="键盘布局"><a href="#键盘布局" class="headerlink" title="键盘布局"></a>键盘布局</h3><p>初始键盘布局是标准的 <code>QWERTY</code> 布局 ，如果想更改布局 ，则输入以下命令查看支持的布局</p><p><code>ls /usr/share/kbd/keymaps/**/*.map.gz</code></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/8888.png" alt="image-20200811152119693"></p><p>设置键盘布局为以下命令</p><p><code>loadkeys 布局名称</code></p><p>这里并不更改布局 ，进行下一步的安装</p><h3 id="验证启动模式"><a href="#验证启动模式" class="headerlink" title="验证启动模式"></a>验证启动模式</h3><p>验证启动模式来为后面的 <code>GRUB</code> 引导安装做准备 ，输入以下命令</p><p><code>ls /sys/firmware/efi/efivars</code></p><p>若正确显示为以下界面 ，则表示系统以 <code>UEFI</code> 模式启动 ，若提示目录不存在，则可能以 <code>BIOS</code> 或 <code>CSM</code> 等模式启动 ，本教程是以 <code>UEFI</code> 模式为基础的</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153154877.png" alt="image-20200811153154877"></p><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><p>虚拟机启动了 <code>NAT</code> 模式 ，所以默认是直接连接了网络的 ， 可以执行 <code>ip link</code> 命令查看网络信息 ， 执行 <code>ping</code> 命令查看网络连通情况</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153430905.png" alt="image-20200811153430905"></p><h3 id="时间校正"><a href="#时间校正" class="headerlink" title="时间校正"></a>时间校正</h3><p>输入以下命令来确保系统时间准确</p><p><code>timedatectl set-ntp true</code></p><p>可以使用 <code>timedatectl status</code> 来查看时间状态</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811153720383.png" alt="image-20200811153720383"></p><h2 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h2><p>分区是很重要的 ，这里也有几个坑</p><h3 id="建立分区"><a href="#建立分区" class="headerlink" title="建立分区"></a>建立分区</h3><p>这里使用 <code>fdisk</code> 工具来建立分区</p><p>输入 <code>fdisk -l</code> 查看硬盘信息 ，其中以 <code>loop</code>/<code>rom</code>/<code>airoot</code> 结尾的可以省略</p><p>这里我的硬盘被识别并命名为 <code>/dev/sda</code> ， 记好这个名称 ， 接下来将在这块硬盘上进行分区</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/7777.png" alt="image-20200811154130565"></p><p>输入 <code>fdisk /dev/sda</code> 进入分区命令界面 ， 可以输入 <code>m</code> 查看命令帮助</p><p>这里输入 <code>g</code> 新建 <code>GPT 分区表</code></p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/101010.png" alt="image-20200811154329134"></p><p>输入 <code>n</code> 来新建分区 ， 第一个分区我们把它作为一个 <code>EFI 系统分区</code></p><p>分区标识默认1即可 [Enter]， 分区开始 ，这里我们输入 <code>2048</code> ，敲击回车</p><p>结束标识 ，可以直接输入分区大小 ， boot分区不需要太大 ， 输入 <code>+500M</code> 即可 ，第一个分区建立完毕。</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811154722520.png" alt="image-20200811154722520"></p><p>接下来建立第二个分区 ， 我们把它作为 <code>SWAP 交换空间</code>的分区 ，可以理解为 win 的虚拟内存 , 依旧输入 <code>n</code> ，分区标识这里选择 3 ，因为我们打算 2 来作为主分区的标识 ，起始标识默认即可 ， 结束标识因为是作为交换空间来使用 ， 所以可以适当设置大一些 ，至此第二个分区建立完毕</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155117805.png" alt="image-20200811155117805"></p><p>接下来建立主分区 ，输入 <code>n</code> ，分区标识默认 2 ，起始标识默认 ， 结束标识默认直到最后 ，至此三个分区全部建立完毕</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155248590.png" alt="image-20200811155248590"></p><p>输入 <code>w</code> 来保存并退出分区</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811155320845.png" alt="image-20200811155320845"></p><p>可以再执行 <code>fdisk -l</code> 查看分区情况 ， 可以看到多出了三个新建的分区</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/111111.png" alt="image-20200811155406918"></p><h3 id="设置文件系统类型"><a href="#设置文件系统类型" class="headerlink" title="设置文件系统类型"></a>设置文件系统类型</h3><p>接下来设置每个分区的文件系统与格式化</p><p>这里注意: <em><code>EFI系统分区的文件系统必须是FAT32的系统</code></em> ，如果是其他类型的系统 ， 会导致 <code>GRUB</code> 安装失败</p><p>首先格式化 <code>EFI 系统分区</code> ，输入 <code>mkfs.fat -F32 /dev/sda1</code> 来设置分区系统类型为 <code>FAT32</code> 并格式化</p><p>接下来格式化并设置 <code>SWAP 分区</code> ，输入 <code>mkswap /dev/sda3</code> 来初始化 <code>SWAP 分区</code> ，接着输入 <code>swapon /dev/sda3</code> 激活 <code>SWAP</code></p><p>最后格式化主分区 ， 输入 <code>mkfs.ext4 /dev/sda2</code> 格式化并设置主分区格式</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811160513632.png" alt="image-20200811160513632"></p><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>接下来进行分区挂载 ， 首先将主分区挂载到 <code>/mnt</code> 目录 ，这也是根目录</p><p><code>mount /dev/sda2 /mnt</code></p><p>进行 <code>EFI 系统分区</code> 挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/efi</span><br><span class="line">mount /dev/sda1 /mnt/efi</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811161158469.png" alt="image-20200811161158469"></p><p>执行 <code>lsblk</code> 查看挂载情况</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811161344180.png" alt="image-20200811161344180"></p><p><code>SWAP</code> 分区会自动挂载 ，所以无需设置</p><h3 id="安装系统镜像和软件包"><a href="#安装系统镜像和软件包" class="headerlink" title="安装系统镜像和软件包"></a>安装系统镜像和软件包</h3><h4 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h4><p>因为不可抗力的情况 ，国内使用默认源会出现下载缓慢的情况 ，所以要设置国内源 ，比如清华源等 ，这里编辑 <code>/etc/pacman.d/mirrorlist</code> 可以设置国内镜像源 ， 这里我们添加清华源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br><span class="line">添加一条记录</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">更新源</span><br><span class="line">pacman -Syy</span><br></pre></td></tr></table></figure><h4 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h4><p>使用 <code>pacstrap</code> 脚本 ， 安装 <code>base</code> 软件包和 <code>linux 内核</code>等等 ，新版Arch不带Vim等软件 ，所以也建议安装上 ，以及 <code>dhcpcd</code> , <code>haveged</code> 等</p><p>最基本的套件为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware</span><br></pre></td></tr></table></figure><p>可以直接执行我这条指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel linux linux-firmware dhcpcd haveged</span><br></pre></td></tr></table></figure><p>等待下载与安装完成 ，安装完成后进入系统配置</p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>生成 <code>fstab</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/121212.png" alt="image-20200811163334589"></p><h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p>进入新安装的系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><h3 id="语言与时区设置"><a href="#语言与时区设置" class="headerlink" title="语言与时区设置"></a>语言与时区设置</h3><h4 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h4 id="设置语言地区"><a href="#设置语言地区" class="headerlink" title="设置语言地区"></a>设置语言地区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;locale.gen</span><br><span class="line">找到需要的地区语言 ，将注释移除</span><br><span class="line">如: en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">执行</span><br><span class="line">locale-gen</span><br><span class="line">生成locale信息</span><br><span class="line">创建 locale.conf 文件 ，并添加</span><br><span class="line">LANG&#x3D;en_US.UTF-8</span><br><span class="line">也可设置为中文 ，视情况而定</span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>编辑主机名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hostname</span><br><span class="line">XXX</span><br></pre></td></tr></table></figure><p>编辑 <code>hosts</code> 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost</span><br><span class="line">127.0.0.1XXX.localdomain XXX</span><br><span class="line"># 其中XXX为上一步创建的主机名</span><br></pre></td></tr></table></figure><p>设置 <code>dhcpcd</code> / <code>haveged</code> 开机启动</p><p><code>dhcpcd</code> 会自动分配ip</p><p><code>haveged</code> 会在开机时自动搜集 <code>系统熵</code> 解决开机启动缓慢的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd</span><br><span class="line">systemctl enable haveged</span><br></pre></td></tr></table></figure><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><p>设置 <code>root</code> 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>添加一个用户并设置权限与密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># useradd -m -g users -s &#x2F;bin&#x2F;bash XXX</span><br><span class="line">passwd XXX</span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line">在 root ALL&#x3D;(ALL) ALL 下添加一句</span><br><span class="line">XXX ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><h2 id="安装GRUB引导"><a href="#安装GRUB引导" class="headerlink" title="安装GRUB引导"></a>安装GRUB引导</h2><p>安装 <code>grub</code> 和 <code>efibootmgr</code> 软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br></pre></td></tr></table></figure><h4 id="GRUB-安装"><a href="#GRUB-安装" class="headerlink" title="GRUB 安装"></a>GRUB 安装</h4><p>安装前使用 <code>uname -a</code> 查看自己的系统架构</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/131313.png" alt="image-20200811171434724"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target&#x3D;x86_64-efi --efi-directory&#x3D;&#x2F;efi --bootloader-id&#x3D;GRUB </span><br><span class="line"># 注意</span><br><span class="line"># --target后为你的系统架构 ，如我的为x86_64 ，--efi-directory后为你的 EFI系统分区地址</span><br></pre></td></tr></table></figure><p>此处有一个小坑 ，若你的 <code>EFI 系统分区</code> 不是<code>fat32</code>类型 ， 就会安装失败</p><p>如果为<code>fat32</code>仍安装失败 ， 可以用 <code>gdisk</code> 将分区设置 <code>ef00</code></p><p>如图所示 ， 即为安装完成</p><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/1414.png" alt="image-20200811172429643"></p><h4 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/image-20200811172715340.png" alt="image-20200811172715340"></p><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>退出新系统 , 重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="进入新系统-，开始愉快玩耍"><a href="#进入新系统-，开始愉快玩耍" class="headerlink" title="进入新系统 ，开始愉快玩耍"></a>进入新系统 ，开始愉快玩耍</h3><h2 id="使用AUR"><a href="#使用AUR" class="headerlink" title="使用AUR"></a>使用AUR</h2><p>既然用上了 <code>Arch</code> 不能不来用一下 <code>AUR</code> ，<code>AUR</code> 工具很多 ，这里选择 <code>yay</code></p><p>首先添加 <code>pacman</code> 的 <code>archlinuxcn</code> 源</p><p>修改 <code>/etc/pacman.conf</code> ，在最后添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br></pre></td></tr></table></figure><p>执行 <code>pacman -Syy</code> 更新源</p><p>安装 <code>archlinuxcn-keyring</code> 来导入 <code>GPG key</code></p><p>安装 <code>yay</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S yay</span><br></pre></td></tr></table></figure><p>配置 <code>AUR</code> 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay --aururl &quot;https:&#x2F;&#x2F;aur.tuna.tsinghua.edu.cn&quot; --save</span><br></pre></td></tr></table></figure><p>剩下的就是愉快的安装软件与配置 ，接下来会更新美化 、配置等教程</p><h2 id="几个坑点"><a href="#几个坑点" class="headerlink" title="几个坑点"></a>几个坑点</h2><ul><li><code>EFI 系统分区</code>必须要是 <code>FAT32</code> 格式</li><li>新版<code>arch</code>貌似在安装后不包括 <code>dhcpcd</code> ，所以在执行安装安装脚本时请安装 <code>dhcpcd</code> 服务 ，否则只能进入 <code>LiveCD</code> 安装了</li><li>如果安装后开机启动缓慢 ，只停留一个界面光标闪烁 ，这是搜集<code>系统熵</code>的问题 ， 安装 <code>haveged</code> 并开启服务可解决</li><li><code>archlinux-keyring</code> 安装失败 ，并提示 <code>could not be locally signed(无法在本地签署)</code> ， 请看<a href="https://www.archlinuxcn.org/gnupg-2-1-and-the-pacman-keyring/" target="_blank" rel="noopener">这里</a></li></ul><blockquote><p>2020年8月11日</p><p>by —笑的心酸</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;虚拟机下的ArchLinux-安装实录-一&quot;&gt;&lt;a href=&quot;#虚拟机下的ArchLinux-安装实录-一&quot; class=&quot;headerlink&quot; title=&quot;虚拟机下的ArchLinux 安装实录(一)&quot;&gt;&lt;/a&gt;虚拟机下的ArchLinux 安装实录(一)&lt;/h1&gt;&lt;h2 id=&quot;获取镜像-gt-创建虚拟机&quot;&gt;&lt;a href=&quot;#获取镜像-gt-创建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;获取镜像 -&amp;gt; 创建虚拟机&quot;&gt;&lt;/a&gt;获取镜像 -&amp;gt; 创建虚拟机&lt;/h2&gt;&lt;h3 id=&quot;获取安装镜像&quot;&gt;&lt;a href=&quot;#获取安装镜像&quot; class=&quot;headerlink&quot; title=&quot;获取安装镜像&quot;&gt;&lt;/a&gt;获取安装镜像&lt;/h3&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Arch" scheme="http://121.89.216.198/tags/Arch/"/>
    
    <category term="Linux" scheme="http://121.89.216.198/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>node学习笔记day04</title>
    <link href="http://121.89.216.198/2020/08/04/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day04/"/>
    <id>http://121.89.216.198/2020/08/04/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day04/</id>
    <published>2020-08-04T09:50:45.000Z</published>
    <updated>2020-08-04T09:51:28.262Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="1-node学习笔记day04"><a href="#1-node学习笔记day04" class="headerlink" title="1. node学习笔记day04"></a>1. node学习笔记day04</h1><h2 id="1-1-cheerio模块"><a href="#1-1-cheerio模块" class="headerlink" title="1.1. cheerio模块"></a>1.1. cheerio模块</h2><blockquote><p>cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对DOM进行操作的地方</p></blockquote><h3 id="1-1-1-安装"><a href="#1-1-1-安装" class="headerlink" title="1.1.1. 安装"></a>1.1.1. 安装</h3><p><code>npm install cheerio</code></p><h3 id="1-1-2-使用与示例"><a href="#1-1-2-使用与示例" class="headerlink" title="1.1.2. 使用与示例"></a>1.1.2. 使用与示例</h3><p>示例操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>load</code> 加载DOM，并返回一个 <code>JQuery</code> 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $ = cheerio.load(demo);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">".test"</span>).text());</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">// PS E:\LearnnodeJS\day04&gt; node .\demo1.js</span></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">"a"</span>).attr(<span class="string">"href"</span>));</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">// PS E:\LearnnodeJS\day04&gt; node .\demo1.js</span></span><br><span class="line"><span class="comment">// www.baidu.com</span></span><br></pre></td></tr></table></figure><p>和 <code>JQuery</code> 操作基本相同</p><h2 id="1-2-axios-流模式返回"><a href="#1-2-axios-流模式返回" class="headerlink" title="1.2. axios 流模式返回"></a>1.2. axios 流模式返回</h2><p>通过设置 <code>responseType</code> 属性为 <code>stream</code> ，生成流，可以来写入文件</p><h3 id="1-2-1-使用和示例"><a href="#1-2-1-使用和示例" class="headerlink" title="1.2.1. 使用和示例"></a>1.2.1. 使用和示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">    .get(<span class="string">"https://xinsuan.xyz/"</span>, &#123; <span class="attr">responseType</span>: <span class="string">"stream"</span> &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">"./test.html"</span>);</span><br><span class="line"></span><br><span class="line">        res.data.pipe(ws);</span><br><span class="line"></span><br><span class="line">        res.data.on(<span class="string">"close"</span>, () =&gt; &#123;</span><br><span class="line">            ws.close();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>运行后写入 <code>test.html</code> 文件，如下<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/20200803162838.png" alt="20200803162838"></p><p>使用流模式可以实现下载文件等操作</p><h1 id="2-puppeteer-无界面谷歌浏览器"><a href="#2-puppeteer-无界面谷歌浏览器" class="headerlink" title="2. puppeteer 无界面谷歌浏览器"></a>2. puppeteer 无界面谷歌浏览器</h1><blockquote><p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。Puppeteer 默认以 headless 模式运行，但是可以通过修改配置文件运行“有头”模式。</p></blockquote><p>具有以下功能:</p><ul><li>生成页面 PDF。</li><li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li><li>自动提交表单，进行 UI 测试，键盘输入等。</li><li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li><li>捕获网站的 timeline trace，用来帮助分析性能问题。</li><li>测试浏览器扩展</li></ul><h2 id="2-1-示例与使用"><a href="#2-1-示例与使用" class="headerlink" title="2.1. 示例与使用"></a>2.1. 示例与使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//生成浏览器对象</span></span><br><span class="line">    <span class="comment">// headless 设置为 false 为有界面打开，默认无界面</span></span><br><span class="line">    <span class="keyword">let</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成页面对象</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="comment">//打开页面</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">"https://www.xinsuan.xyz"</span>);</span><br><span class="line">    <span class="comment">//页面内DOM操作</span></span><br><span class="line">    page.$$<span class="built_in">eval</span>(<span class="string">"#one-words p"</span>, (elements) =&gt; &#123;</span><br><span class="line">        elements.forEach(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//浏览器控制台输出</span></span><br><span class="line">            <span class="built_in">console</span>.log(element.innerHTML);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//监听浏览器控制台事件</span></span><br><span class="line">    page.on(<span class="string">"console"</span>, (...args) =&gt; &#123;</span><br><span class="line">        <span class="comment">//终端输出</span></span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>对DOM进行操作，聚焦或者点击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> brower = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">await</span> brower.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">    <span class="keyword">let</span> wd = <span class="keyword">await</span> page.$(<span class="string">"#form input[name = 'wd']"</span>);</span><br><span class="line">    <span class="keyword">await</span> wd.focus();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> page.keyboard.type(<span class="string">"嘻嘻嘻"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> su = <span class="keyword">await</span> page.$(<span class="string">"#form #su"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> su.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><blockquote><p>2020年8月4日<br>by — 笑的心酸</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;1-node学习笔记day04&quot;&gt;&lt;a href=&quot;#1-node学习笔记day04&quot; class=&quot;headerlink&quot; title=&quot;1. node学习笔记day04&quot;&gt;&lt;/a&gt;1. node学习笔记day04&lt;/h1&gt;&lt;h2 id=&quot;1-1-cheerio模块&quot;&gt;&lt;a href=&quot;#1-1-cheerio模块&quot; class=&quot;headerlink&quot; title=&quot;1.1. cheerio模块&quot;&gt;&lt;/a&gt;1.1. cheerio模块&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对DOM进行操作的地方&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="node" scheme="http://121.89.216.198/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>node实战项目--B站爬虫</title>
    <link href="http://121.89.216.198/2020/07/23/node%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-B%E7%AB%99%E7%88%AC%E8%99%AB/"/>
    <id>http://121.89.216.198/2020/07/23/node%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-B%E7%AB%99%E7%88%AC%E8%99%AB/</id>
    <published>2020-07-23T11:13:05.000Z</published>
    <updated>2020-07-23T12:47:07.039Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="1-node学习笔记day03"><a href="#1-node学习笔记day03" class="headerlink" title="1. node学习笔记day03"></a>1. node学习笔记day03</h1><p><code>node</code> 结合 <code>os</code> 模块与 <code>axios</code> 模块实现爬虫实战</p><h1 id="2-目标"><a href="#2-目标" class="headerlink" title="2. 目标"></a>2. 目标</h1><p>爬取B站用户追番信息，并保存为<code>json</code>文件形式</p><h2 id="2-1-目标API"><a href="#2-1-目标API" class="headerlink" title="2.1. 目标API"></a>2.1. 目标API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;space&#x2F;bangumi&#x2F;follow&#x2F;list?type&#x3D;1&amp;follow_status&#x3D;0&amp;pn&#x3D;?&amp;ps&#x3D;?&amp;vmid&#x3D;?&amp;ts&#x3D;?</span><br></pre></td></tr></table></figure><h2 id="2-2-url各参数解析"><a href="#2-2-url各参数解析" class="headerlink" title="2.2. url各参数解析"></a>2.2. url各参数解析</h2><p><strong>简要描述：</strong></p><ul><li>获取指定用户订阅番剧信息</li></ul><p><strong>请求URL：</strong></p><ul><li><code>https://api.bilibili.com/x/space/bangumi/follow/list</code></li></ul><p><strong>请求方式：</strong></p><ul><li>GET</li></ul><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>是</td><td>int</td><td>固定值 1</td></tr><tr><td>follow_status</td><td>是</td><td>int</td><td>固定值 0</td></tr><tr><td>pn</td><td>是</td><td>int</td><td>请求分页</td></tr><tr><td>ps</td><td>是</td><td>int</td><td>请求数据条数 , &lt;50</td></tr><tr><td>vmid</td><td>是</td><td>int</td><td>用户Uid</td></tr><tr><td>ts</td><td>否</td><td>int</td><td>时间戳</td></tr></tbody></table><p><strong>返回示例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"ttl"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;    </span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        "pn": 1,</span><br><span class="line">        "ps": 1,</span><br><span class="line">        "total": 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回参数说明</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>code</td><td>int</td><td>返回代码</td></tr><tr><td>message</td><td>String</td><td>信息</td></tr><tr><td>data</td><td>json</td><td>番剧数据</td></tr><tr><td>list</td><td>array</td><td>详细信息</td></tr><tr><td>pn</td><td>int</td><td>分页</td></tr><tr><td>ps</td><td>int</td><td>返回数据条数</td></tr><tr><td>total</td><td>int</td><td>总条数</td></tr></tbody></table><h1 id="3-axios-模块"><a href="#3-axios-模块" class="headerlink" title="3. axios 模块"></a>3. axios 模块</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1. 安装"></a>3.1. 安装</h2><p>安装<code>axios</code>模块，此模块基于<code>Promise</code>异步请求。简单方便<br><code>npm install axios</code></p><h2 id="3-2-导入使用"><a href="#3-2-导入使用" class="headerlink" title="3.2. 导入使用"></a>3.2. 导入使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br></pre></td></tr></table></figure><h1 id="4-分析数据"><a href="#4-分析数据" class="headerlink" title="4. 分析数据"></a>4. 分析数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取番剧条数</span></span><br><span class="line">   <span class="keyword">let</span> total = <span class="built_in">parseInt</span>(res.data.data.total);</span><br><span class="line">   <span class="comment">//获取分页数</span></span><br><span class="line">   page = <span class="built_in">Math</span>.ceil(total / params.ps);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"page"</span> + page);</span><br><span class="line">   <span class="comment">//迭代写入</span></span><br><span class="line">   res.data.data.list.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> postDetil = <span class="string">`"<span class="subst">$&#123;el.season_id&#125;</span>":&#123;</span></span><br><span class="line"><span class="string">           "title":" <span class="subst">$&#123;el.title&#125;</span>",</span></span><br><span class="line"><span class="string">           "count": "<span class="subst">$&#123;el.total_count&#125;</span>",</span></span><br><span class="line"><span class="string">           "season": "<span class="subst">$&#123;el.season_title&#125;</span>",</span></span><br><span class="line"><span class="string">           "evaluate": "<span class="subst">$&#123;el.evaluate.replace(<span class="regexp">/\n/g</span>, <span class="string">" "</span>)&#125;</span>",</span></span><br><span class="line"><span class="string">           "url": "<span class="subst">$&#123;el.url&#125;</span>",</span></span><br><span class="line"><span class="string">           "data_show": "<span class="subst">$&#123;el.publish.release_date_show&#125;</span>"</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">           `</span>;</span><br><span class="line">       bangmi[uid].push(postDetil);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h1 id="5-保存数据"><a href="#5-保存数据" class="headerlink" title="5. 保存数据"></a>5. 保存数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> status = <span class="keyword">await</span> f1(</span><br><span class="line">        <span class="string">"./dist/"</span> + uid + <span class="string">"/"</span> + uid + <span class="string">".json"</span>,</span><br><span class="line">        <span class="string">"&#123;\n"</span> + bangmi[uid].toString() + <span class="string">"\n&#125;"</span>,</span><br><span class="line">        <span class="string">"a+"</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h1 id="6-运行后截图"><a href="#6-运行后截图" class="headerlink" title="6. 运行后截图"></a>6. 运行后截图</h1><ul><li><p>提示用户输入要爬取的id<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/20200723204539.png" alt="20200723204539"></p></li><li><p>返回json数据保存在本地<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/20200723204347.png" alt="20200723204347"></p></li></ul><h1 id="7-全部代码"><a href="#7-全部代码" class="headerlink" title="7. 全部代码"></a>7. 全部代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"><span class="keyword">const</span> rs = <span class="built_in">require</span>(<span class="string">"readline"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmid;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"https://api.bilibili.com/x/space/bangumi/follow/list?"</span>;</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    type: <span class="number">1</span>,</span><br><span class="line">    follow_status: <span class="number">0</span>,</span><br><span class="line">    pn: <span class="number">0</span>,</span><br><span class="line">    ps: <span class="number">15</span>,</span><br><span class="line">    vmid: vmid,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bangmi = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装写入操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">path, data, flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, ract</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.writeFile(path, data, &#123; <span class="attr">flag</span>: flag, <span class="attr">encoding</span>: <span class="string">"utf-8"</span> &#125;, (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) ract(err);</span><br><span class="line">            res(<span class="string">"写入完毕"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明用户输入操作</span></span><br><span class="line"><span class="keyword">var</span> r1 = rs.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装读取用户输入操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        r1.question(title, (answer) =&gt; &#123;</span><br><span class="line">            res(answer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明初始化方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> uid = <span class="keyword">await</span> read(<span class="string">"查询的用户UID:"</span>);</span><br><span class="line">    params.vmid = uid;</span><br><span class="line">    bangmi[uid] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断用户文件夹是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(<span class="string">"./dist/"</span> + uid)) &#123;</span><br><span class="line">        fs.mkdir(<span class="string">"./dist/"</span> + uid, (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义循环控制次数与分页</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> page;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> axios</span><br><span class="line">            .get(</span><br><span class="line">                url +</span><br><span class="line">                    <span class="string">"type="</span> +</span><br><span class="line">                    params.type +</span><br><span class="line">                    <span class="string">"&amp;follow_status="</span> +</span><br><span class="line">                    params.follow_status +</span><br><span class="line">                    <span class="string">"&amp;pn="</span> +</span><br><span class="line">                    params.pn +</span><br><span class="line">                    i +</span><br><span class="line">                    <span class="string">"&amp;ps="</span> +</span><br><span class="line">                    params.ps +</span><br><span class="line">                    <span class="string">"&amp;vmid="</span> +</span><br><span class="line">                    params.vmid</span><br><span class="line">            )</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//获取番剧条数</span></span><br><span class="line">                <span class="keyword">let</span> total = <span class="built_in">parseInt</span>(res.data.data.total);</span><br><span class="line">                <span class="comment">//获取分页数</span></span><br><span class="line">                page = <span class="built_in">Math</span>.ceil(total / params.ps);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"page"</span> + page);</span><br><span class="line">                <span class="comment">//迭代写入</span></span><br><span class="line">                res.data.data.list.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> postDetil = <span class="string">`"<span class="subst">$&#123;el.season_id&#125;</span>":&#123;</span></span><br><span class="line"><span class="string">                            "title":" <span class="subst">$&#123;el.title&#125;</span>",</span></span><br><span class="line"><span class="string">                            "count": "<span class="subst">$&#123;el.total_count&#125;</span>",</span></span><br><span class="line"><span class="string">                            "season": "<span class="subst">$&#123;el.season_title&#125;</span>",</span></span><br><span class="line"><span class="string">                            "evaluate": "<span class="subst">$&#123;el.evaluate.replace(<span class="regexp">/\n/g</span>, <span class="string">" "</span>)&#125;</span>",</span></span><br><span class="line"><span class="string">                            "url": "<span class="subst">$&#123;el.url&#125;</span>",</span></span><br><span class="line"><span class="string">                            "data_show": "<span class="subst">$&#123;el.publish.release_date_show&#125;</span>"</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        `</span>;</span><br><span class="line">                    bangmi[uid].push(postDetil);</span><br><span class="line">                &#125;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入json文件</span></span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">await</span> f1(</span><br><span class="line">        <span class="string">"./dist/"</span> + uid + <span class="string">"/"</span> + uid + <span class="string">".json"</span>,</span><br><span class="line">        <span class="string">"&#123;\n"</span> + bangmi[uid].toString() + <span class="string">"\n&#125;"</span>,</span><br><span class="line">        <span class="string">"a+"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(status);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭输入</span></span><br><span class="line">    r1.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><blockquote><p>2020/7/23<br>by —笑的心酸</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;1-node学习笔记day03&quot;&gt;&lt;a href=&quot;#1-node学习笔记day03&quot; class=&quot;headerlink&quot; title=&quot;1. node学习笔记day03&quot;&gt;&lt;/a&gt;1. node学习笔记day03&lt;/h1&gt;&lt;p&gt;&lt;code&gt;node&lt;/code&gt; 结合 &lt;code&gt;os&lt;/code&gt; 模块与 &lt;code&gt;axios&lt;/code&gt; 模块实现爬虫实战&lt;/p&gt;&lt;h1 id=&quot;2-目标&quot;&gt;&lt;a href=&quot;#2-目标&quot; class=&quot;headerlink&quot; title=&quot;2. 目标&quot;&gt;&lt;/a&gt;2. 目标&lt;/h1&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="node" scheme="http://121.89.216.198/tags/node/"/>
    
    <category term="项目" scheme="http://121.89.216.198/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>node学习笔记day02</title>
    <link href="http://121.89.216.198/2020/07/21/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day02/"/>
    <id>http://121.89.216.198/2020/07/21/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day02/</id>
    <published>2020-07-21T11:53:30.000Z</published>
    <updated>2020-07-21T11:53:58.629Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="1-node学习笔记day02"><a href="#1-node学习笔记day02" class="headerlink" title="1. node学习笔记day02"></a>1. node学习笔记day02</h1><h1 id="2-node文件流"><a href="#2-node文件流" class="headerlink" title="2. node文件流"></a>2. node文件流</h1><p>流的出现是为了解决读取文件时，文件内容过于庞大而造成计算机内存不够导致的问题<br>其将庞大文件分为多个流，以流的形式经由内存写入磁盘</p><h2 id="2-1-读取流"><a href="#2-1-读取流" class="headerlink" title="2.1. 读取流"></a>2.1. 读取流</h2><p><code>createReadStream</code>来自node的fs模块，此方法将创建一个输出流</p><h2 id="2-2-写入流"><a href="#2-2-写入流" class="headerlink" title="2.2. 写入流"></a>2.2. 写入流</h2><p><code>createWriteStream</code>此方法将创建一个输入流</p><h2 id="2-3-node管道流"><a href="#2-3-node管道流" class="headerlink" title="2.3. node管道流"></a>2.3. node管道流</h2><p><code>pipe</code> 创建管道，并将输出流中的数据通过管道插入到输入流中</p><h1 id="3-node事件"><a href="#3-node事件" class="headerlink" title="3. node事件"></a>3. node事件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</span><br><span class="line"></span><br><span class="line">Node.js 几乎每一个 API 都是支持回调函数的。</span><br><span class="line"></span><br><span class="line">Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</span><br><span class="line"></span><br><span class="line">Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</span><br></pre></td></tr></table></figure><h2 id="3-1-原生js写事件绑定与监听"><a href="#3-1-原生js写事件绑定与监听" class="headerlink" title="3.1. 原生js写事件绑定与监听"></a>3.1. 原生js写事件绑定与监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userEvent = &#123;</span><br><span class="line">    </span><br><span class="line">    eventName:&#123;  <span class="comment">//事件列表</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    on:<span class="function"><span class="keyword">function</span>(<span class="params">ent,fn</span>) </span>&#123;  <span class="comment">//绑定事件</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventName[ent]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventName[ent].push(fn)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventName[ent] = [];</span><br><span class="line">            <span class="keyword">this</span>.eventName[ent].push(fn)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    emit:<span class="function"><span class="keyword">function</span>(<span class="params">ent,msg</span>) </span>&#123; <span class="comment">//监听事件</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventName[ent]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventName[ent].forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">                element(msg)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    delent:<span class="function"><span class="keyword">function</span>(<span class="params">ent</span>) </span>&#123;  <span class="comment">//删除事件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventName[ent]) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.eventName[ent]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"err"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用原生js事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定一个名为success的事件，该事件接受一个参数并输出</span></span><br><span class="line">userEvent.on(<span class="string">'success'</span>,(msg)=&gt;&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//调用success事件，并传入参数</span></span><br><span class="line">userEvent.emit(<span class="string">'success'</span>,<span class="string">'done'</span>)</span><br><span class="line"><span class="comment">//删除success事件</span></span><br><span class="line">userEvent.delent(<span class="string">'success'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-node事件模块"><a href="#3-2-node事件模块" class="headerlink" title="3.2. node事件模块"></a>3.2. node事件模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个事件对象</span></span><br><span class="line"><span class="keyword">let</span> evt = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定click事件，该事件接受一个参数并输出</span></span><br><span class="line">evt.on(<span class="string">'click'</span>,(data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"wow"</span>+data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听click并调用，传入一个参数</span></span><br><span class="line">evt.emit(<span class="string">'click'</span>,<span class="string">'good'</span>);</span><br></pre></td></tr></table></figure><h1 id="4-node路径模块"><a href="#4-node路径模块" class="headerlink" title="4. node路径模块"></a>4. node路径模块</h1><p><code>path</code></p><h2 id="4-1-路径片段组合"><a href="#4-1-路径片段组合" class="headerlink" title="4.1. 路径片段组合"></a>4.1. 路径片段组合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'/'</span>,<span class="string">'ts'</span>,<span class="string">'keke'</span>]</span><br><span class="line"><span class="keyword">let</span> ps = path.join(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(ps)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出\ts\keke</span></span><br></pre></td></tr></table></figure><h1 id="5-node-OS模块"><a href="#5-node-OS模块" class="headerlink" title="5. node OS模块"></a>5. node OS模块</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> osc = os.cpus();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(osc)</span><br></pre></td></tr></table></figure><h1 id="6-node-URL-模块"><a href="#6-node-URL-模块" class="headerlink" title="6. node URL 模块"></a>6. node URL 模块</h1><h2 id="6-1-解析url地址并返回对象"><a href="#6-1-解析url地址并返回对象" class="headerlink" title="6.1. 解析url地址并返回对象"></a>6.1. 解析url地址并返回对象</h2><p><code>parse</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Bilibili = <span class="string">"https://www.bilibili.com/video/BV1i7411G7kW?p=9"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlObj = url.parse(Bilibili);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(urlObj);</span><br></pre></td></tr></table></figure><h1 id="7-axios"><a href="#7-axios" class="headerlink" title="7. axios"></a>7. axios</h1><p>基于<code>promise</code>的<code>HTTP</code>库，跨平台，轻量级，vue指定</p><h2 id="7-1-特性"><a href="#7-1-特性" class="headerlink" title="7.1. 特性"></a>7.1. 特性</h2><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h2 id="7-2-安装"><a href="#7-2-安装" class="headerlink" title="7.2. 安装"></a>7.2. 安装</h2><p><code>npm install axios</code></p><h2 id="7-3-导入使用"><a href="#7-3-导入使用" class="headerlink" title="7.3. 导入使用"></a>7.3. 导入使用</h2><p>示例：get请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url,params)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="8-request-模块"><a href="#8-request-模块" class="headerlink" title="8. request 模块"></a>8. request 模块</h1><p>官网介绍<code>自2020年2月份以来，本模块已弃用</code>…<br>不过还是要了解了解</p><h2 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1. 安装"></a>8.1. 安装</h2><p><code>npm install request</code></p><h2 id="8-2-导入使用"><a href="#8-2-导入使用" class="headerlink" title="8.2. 导入使用"></a>8.2. 导入使用</h2><p>示例：简单get请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req.get(<span class="string">"https://www.baidu.com"</span>,(err,response,body)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">    <span class="built_in">console</span>.log(body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8-3-封装"><a href="#8-3-封装" class="headerlink" title="8.3. 封装"></a>8.3. 封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqGet</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        req.get(url, (err, response, body) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) reject(err)</span><br><span class="line">            reslove(&#123;response,body&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2020年7/21<br>by 笑的心酸</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;1-node学习笔记day02&quot;&gt;&lt;a href=&quot;#1-node学习笔记day02&quot; class=&quot;headerlink&quot; title=&quot;1. node学习笔记day02&quot;&gt;&lt;/a&gt;1. node学习笔记day02&lt;/h1&gt;&lt;h1 id=&quot;2-node文件流&quot;&gt;&lt;a href=&quot;#2-node文件流&quot; class=&quot;headerlink&quot; title=&quot;2. node文件流&quot;&gt;&lt;/a&gt;2. node文件流&lt;/h1&gt;&lt;p&gt;流的出现是为了解决读取文件时，文件内容过于庞大而造成计算机内存不够导致的问题&lt;br&gt;其将庞大文件分为多个流，以流的形式经由内存写入磁盘&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="node" scheme="http://121.89.216.198/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>hexo升级实录</title>
    <link href="http://121.89.216.198/2020/07/18/hexo%E5%8D%87%E7%BA%A7%E5%AE%9E%E5%BD%95/"/>
    <id>http://121.89.216.198/2020/07/18/hexo%E5%8D%87%E7%BA%A7%E5%AE%9E%E5%BD%95/</id>
    <published>2020-07-18T11:49:33.000Z</published>
    <updated>2020-07-18T12:05:30.867Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="hexo升级实录"><a href="#hexo升级实录" class="headerlink" title="hexo升级实录"></a>hexo升级实录</h1><p>今天升级了<code>nodeJS</code>到14版本，然后使用<code>hexo</code>时出现如下警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(node:17352) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(Use &#96;node --trace-warnings ...&#96; to show where the warning was created)</span><br><span class="line">(node:17352) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:17352) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br><span class="line">(node:17352) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency</span><br><span class="line">(node:17352) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</span><br><span class="line">(node:17352) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>并且构建文件错误，遂想到是因为<code>node</code>版本与当前<code>hexo</code>不匹配的原因，进到hexo的官网发现其发布了新的版本，所以应升级尝试一下<br>hexo升级分为以下四步，还是很简单的</p><ul><li>使用npm升级命令 <code>npm -i hexo -g</code> ，但是并无效果</li><li>安装<code>npm-check</code>: <code>npm install -g npm-check</code>，并使用该命令来检查插件版本</li><li>安装<code>npm-upgrade</code> : <code>npm install -g npm-upgrade</code>,并使用该命令来升级插件</li><li>使用<code>npm update -g</code> 与 <code>npm update --save</code>命令</li></ul><p>此时全局hexo升级完成，但是用来发布博客的版本尚未升级<br>此时应新建一个博客文件夹，执行<code>hexo init</code>命令，然后将旧博客的配置文件:<code>package.json</code> 、 <code>_config.yml</code> 以及 <code>主题文件</code> 、<code>md文章</code>复制到新的博客文件夹相应位置中<br>然后在新目录下执行 <code>npm update --save</code>来安装/升级所需依赖<br>此时<code>hexo</code>升级工作完成</p><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;hexo升级实录&quot;&gt;&lt;a href=&quot;#hexo升级实录&quot; class=&quot;headerlink&quot; title=&quot;hexo升级实录&quot;&gt;&lt;/a&gt;hexo升级实录&lt;/h1&gt;&lt;p&gt;今天升级了&lt;code&gt;nodeJS&lt;/code&gt;到14版本，然后使用&lt;code&gt;hexo&lt;/code&gt;时出现如下警告&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;lineno&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(Use &amp;#96;node --trace-warnings ...&amp;#96; to show where the warning was created)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;column&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;filename&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;lineno&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;column&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(node:17352) Warning: Accessing non-existent property &amp;#39;filename&amp;#39; of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="个人随笔" scheme="http://121.89.216.198/tags/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>node学习笔记day01</title>
    <link href="http://121.89.216.198/2020/07/17/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day01/"/>
    <id>http://121.89.216.198/2020/07/17/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day01/</id>
    <published>2020-07-17T08:41:54.000Z</published>
    <updated>2020-07-18T10:15:10.327Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="1-node学习笔记day01"><a href="#1-node学习笔记day01" class="headerlink" title="1. node学习笔记day01"></a>1. node学习笔记day01</h1><h1 id="2-node简介"><a href="#2-node简介" class="headerlink" title="2. node简介"></a>2. node简介</h1><p>是一个运行js的环境 , 不是一门新的语言 , 不是js的框架 , 而是独立于浏览器来运行js的环境或js编译器 , 采用谷歌的V8引擎 , node可以用来写后端及操作文件或数据库 , 使js更强<br>node中可以输出一下<code>window</code>/<code>document</code>对象 , 会发现没有定义 , 这是因为这两个对象都是浏览器环境下的 , 而node作为一个独立环境是不存在这两个对象的定义的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//node报错：ReferenceError: window is not defined</span></span><br></pre></td></tr></table></figure><h1 id="3-node安装"><a href="#3-node安装" class="headerlink" title="3. node安装"></a>3. node安装</h1><p>百度node官网 , 下载安装包 , 安装完成自动配置环境变量 , 控制台输入<code>node -v</code>来检测node是否安装成功及查看node版本</p><h1 id="4-node运行js文件"><a href="#4-node运行js文件" class="headerlink" title="4. node运行js文件"></a>4. node运行js文件</h1><p>可在命令行使用<code>node</code>命令之后 , 输入js语句 , 回车运行 , 也可输入<code>node XX.js</code>来运行js文件</p><h1 id="5-node运行示例"><a href="#5-node运行示例" class="headerlink" title="5. node运行示例"></a>5. node运行示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"小明"</span>;</span><br><span class="line">        <span class="keyword">this</span>.pwa = <span class="string">"123456"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name+<span class="string">"  "</span>+<span class="keyword">this</span>.pwa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> user();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u1.toString());</span><br></pre></td></tr></table></figure><p>保存为文件后 , 使用<code>node xx.js</code>运行后结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\LearnnodeJS\day01&gt; node .\test.js</span><br><span class="line">小明  123456</span><br></pre></td></tr></table></figure><h1 id="6-node模块化"><a href="#6-node模块化" class="headerlink" title="6. node模块化"></a>6. node模块化</h1><p>可跨文件使用变量或对象等 , 每个文件都可以看作一个模块<br>使用<code>commonJS</code>规范 , 包含三个关键字：<code>require</code>、<code>exports</code>、<code>module</code><br>js导出某对象：<code>exports.name = name</code> (xx.js)<br>js导入某对象：<code>var name = require(&#39;/xx.js&#39;)</code> (test.js)<br>模块化示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xx.js 导出模块</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name:<span class="string">"zs"</span>,</span><br><span class="line">    sex:<span class="string">"man"</span>,</span><br><span class="line">    age:<span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.user = user;</span><br><span class="line"><span class="comment">//或使用</span></span><br><span class="line"><span class="built_in">module</span>.exports.user = user;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js  导入xx模块</span></span><br><span class="line"><span class="keyword">var</span> u2 = <span class="built_in">require</span>(<span class="string">'./xx.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(u2.user.name);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\LearnnodeJS\day01&gt; node .\test.js</span><br><span class="line">zs</span><br></pre></td></tr></table></figure><p><code>exports</code> 本质上是指向了 <code>module.exports</code> , 所以两者使用没有区别 , 但要注意如果不小心重写了<code>exports</code> , 如：<code>exports = {user:&quot;zs&quot;}</code> 此时<code>exports</code>不在指向<code>module.exports</code> , 而是被重写为一个对象或属性 , 此时将没有了导出功能 , 所以以下方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports = &#123;<span class="attr">user</span>:<span class="string">"zs"</span>&#125; <span class="comment">//错误的 , 将改变指向 , 不具备导出功能</span></span><br><span class="line"><span class="comment">//运行后输出 :  &#123;&#125;</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">user</span>:<span class="string">"zs"</span>&#125;  <span class="comment">//正确的 , 将导出一个对象</span></span><br><span class="line"><span class="comment">//运行后输出 : &#123; user: 'zs' &#125;</span></span><br></pre></td></tr></table></figure><p>其两种的运行结果不同 , 所以应尽量使用<code>module.exports</code>来进行模块的导出<br>模块导入后会在内存中产生<code>缓存</code> , 下次导入时若<code>缓存</code>中存在 , 将直接获取 , 若想重新导入 , 就要清除缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./xx'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./xx'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a == b);</span><br><span class="line"><span class="comment">//将输出 true</span></span><br></pre></td></tr></table></figure><p>这是因为模块导入形成缓存 , 在第二次导入时 , 将<code>直接</code>在缓存中拿取 , 不会<code>产生</code>新对象</p><h1 id="7-node的require加载机制"><a href="#7-node的require加载机制" class="headerlink" title="7. node的require加载机制"></a>7. node的require加载机制</h1><p><code>require</code>中关于路径：<br>若为<code>require(&#39;/home/xx.js&#39;)</code> , 将前往磁盘根目录下层级寻找 //绝对<br>若为<code>require(&#39;./xx.js&#39;)</code> , 将在主模块文件下寻找 //相对<br>若为<code>require(&#39;xx&#39;)</code> , 将视为加载<code>第三方</code>模块 , 其加载顺序为 :</p><ul><li>首先查看当前目录下的<code>node_modules</code>文件夹 , 若当前目录下没有，则去父级目录查找，一直找到磁盘根目录</li><li>在<code>node_modules</code>中查找第三方模块名称文件夹 , 若找到，则进入该文件夹，查看文件间内的<code>package.json</code>文件，查找其<code>main</code>属性内容，并将其内容作为第三方模块的主入口</li><li>若没有<code>main</code>属性，则默认加载第三方模块文件夹内的<code>index.js</code>文件</li></ul><h1 id="8-node对于文件的操作"><a href="#8-node对于文件的操作" class="headerlink" title="8. node对于文件的操作"></a>8. node对于文件的操作</h1><p>导入文件操作模块<code>fs</code> , 其中文件操作有同步与异步两种方式，node默认异步操作</p><h2 id="8-1-对文件的读取操作"><a href="#8-1-对文件的读取操作" class="headerlink" title="8.1. 对文件的读取操作"></a>8.1. 对文件的读取操作</h2><p><code>readFile</code>/<code>readFileSync</code>方法，异步与同步</p><h3 id="8-1-1-同步"><a href="#8-1-1-同步" class="headerlink" title="8.1.1. 同步"></a>8.1.1. 同步</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts.txt 内容：hello</span></span><br><span class="line"><span class="keyword">var</span> f1 = fs.readFileSync(<span class="string">'ts.txt'</span>,&#123;<span class="attr">flag</span>:<span class="string">'r'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(f1)</span><br><span class="line"><span class="comment">//输出：hello</span></span><br></pre></td></tr></table></figure><p><code>readFileSync(path,[options])</code><br>参数列表：</p><ul><li>path ( 所读取文件目标路径 ) : &lt;String | number | Buffer&gt;</li><li>options ( 文件属性,可选参数 ) : &lt;Object | String&gt;<ul><li>flag ( 对文件的操作 ) :<string>默认值 ‘r’</string></li><li>encoding ( 文件编码 ) :<string>默认值 ‘null’</string></li></ul></li></ul><h3 id="8-1-2-异步"><a href="#8-1-2-异步" class="headerlink" title="8.1.2. 异步"></a>8.1.2. 异步</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'ts.txt'</span>,&#123;<span class="attr">flag</span>:<span class="string">'r'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err; <span class="comment">//出现异常抛出</span></span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//成功打印内容：hello</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>readFile(path,[options],callback)</code><br>参数列表：</p><ul><li>path ( 所读取文件目标路径 ) : &lt;String | number | Buffer&gt;</li><li>options ( 文件属性,可选参数 ) : &lt;Object | String&gt;<ul><li>flag ( 对文件的操作 ) :<string>默认值 ‘r’</string></li><li>encoding ( 文件编码 ) :<string>默认值 ‘null’</string></li></ul></li><li>callback ( 回调函数 ) :<funtion><ul><li>err : 出错</li><li>data : 内容</li></ul></funtion></li></ul><h3 id="8-1-3-封装"><a href="#8-1-3-封装" class="headerlink" title="8.1.3. 封装"></a>8.1.3. 封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rect</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(path,&#123;<span class="attr">flag</span>:<span class="string">'r'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;,(err,data)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) rect(err)</span><br><span class="line">            res(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2(<span class="string">'ts.txt'</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8-2-对文件的写入操作"><a href="#8-2-对文件的写入操作" class="headerlink" title="8.2. 对文件的写入操作"></a>8.2. 对文件的写入操作</h2><p><code>writeFile</code>/<code>writeFileSync</code>方法，异步与同步<br>写入文件若不存在，将自动创建文件</p><h3 id="8-2-1-同步"><a href="#8-2-1-同步" class="headerlink" title="8.2.1. 同步"></a>8.2.1. 同步</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFileSync(<span class="string">'ts.txt'</span>,<span class="string">'world'</span>,&#123;<span class="attr">flag</span>:<span class="string">'a+'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;);</span><br></pre></td></tr></table></figure><p><code>writeFileSync(path,data,[options])</code><br>参数列表：</p><ul><li>path ( 所读取文件目标路径 ) : &lt;String | number | Buffer | URL&gt;</li><li>data ( 写入的数据 ) : &lt;String | …&gt;</li><li>options ( 文件属性,可选参数 ) : &lt;Object | String&gt;<ul><li>flag ( 对文件的操作 ) :<string>默认值 ‘w’; ‘w’为覆盖写入; ‘a+’为追加写入</string></li><li>encoding ( 文件编码 ) :<string>默认值 ‘null’</string></li></ul></li></ul><h3 id="8-2-2-异步"><a href="#8-2-2-异步" class="headerlink" title="8.2.2. 异步"></a>8.2.2. 异步</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'ts.txt'</span>,<span class="string">'World--Sync'</span>,&#123;<span class="attr">flag</span>:<span class="string">'a+'</span>,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>writeFile(path,data,[options],callback)</code><br>参数列表：</p><ul><li>path ( 所读取文件目标路径 ) : &lt;String | number | Buffer | URL&gt;</li><li>data ( 写入的数据 ) : &lt;String | …&gt;</li><li>options ( 文件属性,可选参数 ) : &lt;Object | String&gt;<ul><li>flag ( 对文件的操作 ) :<string>默认值 ‘w’; ‘w’为覆盖写入; ‘a+’为追加写入</string></li><li>encoding ( 文件编码 ) :<string>默认值 ‘null’</string></li></ul></li><li>callback ( 回调函数 ) :<funtion><ul><li>err ( 出现错误 ) :<error></error></li></ul></funtion></li></ul><h3 id="8-2-3-封装"><a href="#8-2-3-封装" class="headerlink" title="8.2.3. 封装"></a>8.2.3. 封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">path,data,flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,ract</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.writeFile(path,data,&#123;<span class="attr">flag</span>:flag,<span class="attr">encoding</span>:<span class="string">'utf-8'</span>&#125;,(err)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) ract(err)</span><br><span class="line">            res(<span class="string">"写入完毕"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> f1(<span class="string">'test.html'</span>,<span class="string">'&lt;h1&gt;ddddd&lt;/h1&gt;'</span>,<span class="string">'a+'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-其他操作"><a href="#8-3-其他操作" class="headerlink" title="8.3. 其他操作"></a>8.3. 其他操作</h2><p><code>unlink</code> : 删除文件操作<br><code>mkdir</code> : 创建目录<br><code>readdir</code> : 读取目录<br><code>rmdir</code> : 删除目录<br>…等等 <a href="http://nodejs.cn/api/" target="_blank" rel="noopener">中文文档</a></p><h1 id="9-node-输入输出"><a href="#9-node-输入输出" class="headerlink" title="9. node 输入输出"></a>9. node 输入输出</h1><h2 id="9-1-输入"><a href="#9-1-输入" class="headerlink" title="9.1. 输入"></a>9.1. 输入</h2><p><code>readLine</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1 = readline.createInterface(&#123;</span><br><span class="line">    input:process.stdin,</span><br><span class="line">    output:process.stdout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r1.question(<span class="string">'整点啥'</span>,(answer)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answer)</span><br><span class="line">    r1.close();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r1.on(<span class="string">'close'</span>,()=&gt;&#123;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>createInterface</code> : 创建输入输出对象，调用了终端进程的输入输出<br><code>input:process.stdin</code> : 创建输入<br><code>output:process.stdout</code> : 创建输出<br><code>question</code> : 提问方法，使用完毕后应关闭输入流，否则程序不会终止<br><code>close</code> : 关闭输入流<br><code>on</code> : 监听事件，并作出响应<br><code>process.exit(0)</code> : 退出终端进程</p><h2 id="9-2-封装"><a href="#9-2-封装" class="headerlink" title="9.2. 封装"></a>9.2. 封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        r1.question(title,(answer)=&gt;&#123;</span><br><span class="line">            res(answer)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-常用npm命令"><a href="#10-常用npm命令" class="headerlink" title="10. 常用npm命令"></a>10. 常用npm命令</h1><p><code>node -v</code> 查看node版本<br><code>npm init</code> 自动在目录下生成<code>package.json</code>文件，加入<code>-y</code>可跳过问答<br><code>npm -v</code> 查看npm版本<br><code>npm list</code> 查看当前目录下安装的包，加入<code>-g</code>查看全局安装的包<br><code>npm config list</code> 查看配置信息<br><code>npm install 包名</code> 自动安装包及其所需依赖<br><code>npm install 包名 --save -dev</code> 安装包的开发环境所需依赖<br><code>npm install 包名 --save</code> 安装包的生产环境所需依赖<br><code>npm uninstall 包名</code> 卸载某个包</p><blockquote><p>2020/07/17<br>by —- 笑的心酸</p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;1-node学习笔记day01&quot;&gt;&lt;a href=&quot;#1-node学习笔记day01&quot; class=&quot;headerlink&quot; title=&quot;1. node学习笔记day01&quot;&gt;&lt;/a&gt;1. node学习笔记day01&lt;/h1&gt;&lt;h1 id=&quot;2-node简介&quot;&gt;&lt;a href=&quot;#2-node简介&quot; class=&quot;headerlink&quot; title=&quot;2. node简介&quot;&gt;&lt;/a&gt;2. node简介&lt;/h1&gt;&lt;p&gt;是一个运行js的环境 , 不是一门新的语言 , 不是js的框架 , 而是独立于浏览器来运行js的环境或js编译器 , 采用谷歌的V8引擎 , node可以用来写后端及操作文件或数据库 , 使js更强&lt;br&gt;node中可以输出一下&lt;code&gt;window&lt;/code&gt;/&lt;code&gt;document&lt;/code&gt;对象 , 会发现没有定义 , 这是因为这两个对象都是浏览器环境下的 , 而node作为一个独立环境是不存在这两个对象的定义的&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://121.89.216.198/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="node" scheme="http://121.89.216.198/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GIthub+阿里云实现个人博客与自动发布</title>
    <link href="http://121.89.216.198/2020/07/01/hexo-GIthub-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/"/>
    <id>http://121.89.216.198/2020/07/01/hexo-GIthub-%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E7%8E%B0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/</id>
    <published>2020-07-01T14:14:01.000Z</published>
    <updated>2020-07-02T03:00:03.368Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>假设以下操作你已经拥有了自己的域名与服务器</p></blockquote><h1 id="hexo安装与基本语法"><a href="#hexo安装与基本语法" class="headerlink" title="hexo安装与基本语法"></a>hexo安装与基本语法</h1><h2 id="安装前环境配置-nodejs"><a href="#安装前环境配置-nodejs" class="headerlink" title="安装前环境配置:nodejs"></a>安装前环境配置:nodejs</h2><p>前往<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">nodejs官网</a>下载所需版本，安装即可<br>安装好后打开终端输入<code>node -v</code>,出现以下代码即表示安装成功<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/20200701223401.png" alt="20200701223401"></p><h2 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h2><p>在终端中输入<code>npm install hexo-cli -g</code>，回车等待安装完成<br>安装成功后输入<code>hexo -v</code>回车，出现以下代码即表示安装成功<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/20200701223647.png" alt="20200701223647"><br>新建或选择一个储存<code>博客文件</code>的文件夹<br>在文件夹下打开终端，输入<code>hexo init</code>回车，hexo即可在当前目录下生成博客所需的文件，稍作等待后，即可新建完成<br>目录结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>其余命令自行查询<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a><br>接下来安装hexo的git插件来使hexo对git支持<br>在当前目录下输入<code>npm install hexo-deployer-git --save</code>回车即可安装<br>接下来配置服务器方面</p><h1 id="阿里云方面配置"><a href="#阿里云方面配置" class="headerlink" title="阿里云方面配置"></a>阿里云方面配置</h1><p><code>下列操作以Centos7系统为代表</code><br>安装<code>nginx</code>、<code>git</code>过程省略<br>选择/新建一个目录来作为自己<code>博客</code>文件存储的地方<br>修改权限为：<code>chmod -R 777 /XXX/XXX/blog/</code><br>新建一个用来发布博客的工具用户<code>adduser git</code>,修改他的权限<br>执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 &#x2F;etc&#x2F;sudoers</span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>在打开的文档中找到<code>root ALLALL=() ALL</code>,在他的下面添加一行<code>git ALLALL=() ALL</code>,保存退出<br>输入<code>sudo passswd git</code>为<code>git</code>用户设置密码及解除锁定</p><h2 id="nginx的配置"><a href="#nginx的配置" class="headerlink" title="nginx的配置"></a>nginx的配置</h2><p>进入nginx的安装目录，输入<code>vim conf/nginx.conf</code>回车，即可打开nginx的配置文件,修改端口80的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;   &#x2F;&#x2F;监听的端口</span><br><span class="line">    server_name  www.xinsuan.xyz; &#x2F;&#x2F;匹配主机名，例如访问的为www.xinsuan.xyz,自动匹配成功后转发到相应的服务器中</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;XXX&#x2F;XXXX&#x2F;blog; &#x2F;&#x2F;网站主目录，这里改为要存储博客的目录</span><br><span class="line">        index  index.html index.htm; &#x2F;&#x2F;匹配网站主页文件</span><br><span class="line">        expires 7d; &#x2F;&#x2F;缓存设置 (可选)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，nginx方面配置结束</p><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>输入<code>su git</code>切换到新建的<code>git</code>用户，选择/新建一个目录来作为远程仓库配合博客发布使用<br>在新建的目录中输入<code>git init --bare XXX.git</code>，其中XXX为自定义名字，配置目录权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 XXX.git</span><br></pre></td></tr></table></figure><p>进入<code>XXX.git</code>目录下的<code>hooks</code>目录，新建钩子文件<code>post-receive</code>,编辑文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">git --work-tree&#x3D;存储博客目录 --git-dir&#x3D;刚刚新建的远程仓库目录 checkout -f</span><br><span class="line">例如：git --work-tree&#x3D;&#x2F;usr&#x2F;bin&#x2F;blog --git-dir&#x3D;&#x2F;usr&#x2F;repo&#x2F;XXX.git checkout -f</span><br></pre></td></tr></table></figure><p>这个文件就是当文件上传到远程仓库后自动<code>转发</code><br>接下来给文件以运行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>###配置<code>sshKey</code>实现免密登录<br>服务端输入以下命令：<code>mkdir ~/.ssh</code>、<code>vim ~/.ssh/authorized_keys</code></p><p>本机进入<code>C:\Users\XXX\.ssh</code>目录，如果没有则需要git生成<code>sshKey</code><br>输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "username" //配置用户名</span><br><span class="line">git config --global user.email "useremail" //配置邮箱</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C "useremail" //生成公钥与私钥,过程中连按三次回车即可，无需设置密码等</span><br></pre></td></tr></table></figure><p>再次进入<code>C:\Users\XXX\.ssh</code>，查看<code>id_rsa.pub</code>中的内容(公钥)，将其复制到服务器刚刚新建的<code>authorized_keys</code>文件中，保存退出。<br>至此，服务器方面暂时结束</p><h1 id="配置GIthub与hexo"><a href="#配置GIthub与hexo" class="headerlink" title="配置GIthub与hexo"></a>配置GIthub与hexo</h1><p>进入<code>hexo</code>博客目录，打开<code>_config.yml</code>文件，这是<code>hexo</code>的配置文件，具体配置参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官方文档</a>，这里只说一下关于git方面的配置<br>修改文件中的以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@远程仓库地址&#x2F;ip:&#x2F;usr&#x2F;repo&#x2F;XXX.git &#x2F;&#x2F;远程仓库地址</span><br><span class="line">  &#x2F;&#x2F;例如：git@10.10.10.10:&#x2F;usr&#x2F;repo&#x2F;blog.git</span><br><span class="line">  branch: master &#x2F;&#x2F;分支选择master即可</span><br></pre></td></tr></table></figure><h1 id="实现自动发布"><a href="#实现自动发布" class="headerlink" title="实现自动发布"></a>实现自动发布</h1><p>接下来就是自动发布了，新建一篇文章，输入以下命令即可自动发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;新建文章&quot;</span><br><span class="line">hexo clean &amp;&amp; hexo d -g  &#x2F;&#x2F;构建并推送至远程仓库，到达远程仓库后触发hooks，自动将文件转发到了博客目录，实现自动化</span><br></pre></td></tr></table></figure><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>将<code>git</code>用户权限限制，切换到<code>root</code>用户，编辑<code>/etc/passwd</code>,在最后添加一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git:x:1000:1000::&#x2F;home&#x2F;git:&#x2F;usr&#x2F;bin&#x2F;git-shell  </span><br><span class="line">&#x2F;&#x2F;这是限制该用户只能使用git-shell，所以并不能登录等其他操作，只是一个发布文章的工具用户</span><br></pre></td></tr></table></figure><p>其余修改<code>hexo</code>主题、各种<code>hexo</code>插件等，后期介绍</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;假设以下操作你已经拥有了自己的域名与服务器&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;hexo安装与基本语法&quot;&gt;&lt;a href=&quot;#hexo安装与基本语法&quot; class=&quot;headerlink&quot; title=&quot;hexo安装与基本语法&quot;&gt;&lt;/a&gt;hexo安装与基本语法&lt;/h1&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://121.89.216.198/tags/hexo/"/>
    
    <category term="教程" scheme="http://121.89.216.198/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>新版Windows Terminal美化配置</title>
    <link href="http://121.89.216.198/2020/06/09/%E6%96%B0%E7%89%88Windows-Terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://121.89.216.198/2020/06/09/%E6%96%B0%E7%89%88Windows-Terminal%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/</id>
    <published>2020-06-09T02:14:58.000Z</published>
    <updated>2020-06-09T12:31:08.740Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="关于新版Windows-Terminal"><a href="#关于新版Windows-Terminal" class="headerlink" title="关于新版Windows Terminal"></a>关于新版Windows Terminal</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，还可以用于创建你自己的主题并自定义文本、颜色、背景和快捷键绑定。<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/wt.png" alt="wt"></p><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>下载途径有两种：<br>**<code>需要系统版本190X及以上</code>**<br>可在<a href="https://aka.ms/terminal" target="_blank" rel="noopener"><code>微软商店</code></a>内搜索下载<br>亦可在<a href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener"><code>GitHub发布页</code></a>下载<br><strong>需要注意：</strong>git处有两种版本<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/dl.jpg" alt="版本"><br>第一个为<strong>预览版</strong> ，第二个为<strong>稳定版</strong>，请自行选择下载<br>安装界面如图(因为我这里已经安装了所以显示为启动，正常应为安装):<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/wt-install.png" alt="wt-install"></p><h1 id="美化准备工作"><a href="#美化准备工作" class="headerlink" title="美化准备工作"></a>美化准备工作</h1><blockquote><ul><li>PowerShell7</li><li>良好的网络环境</li></ul></blockquote><h2 id="PowerShell7安装"><a href="#PowerShell7安装" class="headerlink" title="PowerShell7安装"></a>PowerShell7安装</h2><p>在<a href="https://github.com/PowerShell/PowerShell" target="_blank" rel="noopener"><code>PowerShell</code></a>处选择对应系统下载<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/![ps7](ps7.png).png" alt="ps7"><br>其中<code>LTS</code>为长期更新版本, <code>stable</code> 稳定版本，<code>preview</code>预览版本</p><h2 id="将Terminal添加到右键菜单"><a href="#将Terminal添加到右键菜单" class="headerlink" title="将Terminal添加到右键菜单"></a>将Terminal添加到右键菜单</h2><p>这里有两种方式修改:</p><ul><li>通过修改注册表(不推荐)</li><li>使用git上的一键脚本配置</li></ul><p>这里着重说明一下第二种方式(下列操作默认管理员身份运行)<br>点击<a href="https://github.com/lextm/windowsterminal-shell" target="_blank" rel="noopener">一键脚本</a>跳转页面<br><strong>注意</strong><code>需要PowerShell版本为7</code><br>可下载<code>install.sp1</code>文件然后在<code>PowerShell7</code>中找到文件执行命令 <code>.\install.ps1</code><br>亦可采用git页面给出的命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol &#x3D; [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;lextm&#x2F;windowsterminal-shell&#x2F;master&#x2F;install.ps1&#39;))</span><br></pre></td></tr></table></figure><p><strong>注意：可能会报下列错误</strong></p><p><code>.\install.ps1: File C:\Users\lenovo\Desktop\install.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.</code></p><p>这是因为<code>PowerShell</code>默认执行权限的问题,此时只需打开<code>PowerShell</code>输入下列命令即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h2 id="Windows-Terminal配置文件更改"><a href="#Windows-Terminal配置文件更改" class="headerlink" title="Windows Terminal配置文件更改"></a>Windows Terminal配置文件更改</h2><p>打开<code>Windows Terminal</code>，点击标题栏小三角，打开设置页面<br>目前官方仍未更新GUI页面，所以打开为一个JSON文件<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/setting.png" alt="setting"></p><h3 id="将PowerShell7添加至Windows-Terminal启动菜单"><a href="#将PowerShell7添加至Windows-Terminal启动菜单" class="headerlink" title="将PowerShell7添加至Windows Terminal启动菜单"></a>将PowerShell7添加至Windows Terminal启动菜单</h3><p>在配置文件中修改以下属性<br>属性名称:<code>list</code><br>在其中添加:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"guid"</span>: <span class="string">"&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;"</span>, <span class="comment">//程序对应的guid属性唯一值</span></span><br><span class="line">    <span class="attr">"hidden"</span>: <span class="literal">false</span>,      <span class="comment">//是否在启动列表隐藏</span></span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"pwsh7"</span>,    <span class="comment">//启动列表名称</span></span><br><span class="line">    <span class="attr">"tabTitle"</span>: <span class="string">"pwsh7"</span>,    <span class="comment">//选项卡标题名称</span></span><br><span class="line">    <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.PowershellCore"</span>,    <span class="comment">//这会存储源自配置文件的配置文件生成器的名称</span></span><br><span class="line">    <span class="attr">"startingDirectory"</span>: <span class="string">"."</span>,   <span class="comment">//加载 shell 时所处的起始目录 这一步一定要设为'.'，否则会影响后续操作</span></span><br><span class="line">    <span class="attr">"historySize"</span>: <span class="number">9001</span>,        <span class="comment">//历史记录大小</span></span><br><span class="line">    <span class="attr">"commandline"</span>: <span class="string">"C:/Program Files/PowerShell/7/pwsh.exe -nologo"</span>, <span class="comment">//配置文件中使用的可执行文件</span></span><br><span class="line">    <span class="attr">"snapOnInput"</span>: <span class="literal">true</span> <span class="comment">//键入时滚动到输入行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>guid</code>生成可以点击<a href="http://www.ofmonkey.com/transfer/guid" target="_blank" rel="noopener">此处</a></p><h3 id="修改默认启动shell"><a href="#修改默认启动shell" class="headerlink" title="修改默认启动shell"></a>修改默认启动shell</h3><p>此时我们修改默认的启动shell为新安装的<code>PowerShell7</code></p><p>属性名称: <code>defaultProfile</code><br>属性值: 对应shell的<code>guid</code>属性</p><p>将此值改为我们上方设置的<code>PowerShell7</code>的<code>guid</code></p><h3 id="修改字体，背景及配色方案等"><a href="#修改字体，背景及配色方案等" class="headerlink" title="修改字体，背景及配色方案等"></a>修改字体，背景及配色方案等</h3><p>在<code>profiles</code> 属性下的 <code>defaults</code>属性中添加/修改些默认参数:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acrylicOpacity"</span>: <span class="number">0.25</span>, <span class="comment">//设置背景模糊度</span></span><br><span class="line">    <span class="attr">"useAcrylic"</span>: <span class="literal">true</span>, <span class="comment">//开启背景毛玻璃效果</span></span><br><span class="line">    <span class="attr">"colorScheme"</span>: <span class="string">"Monokai Night"</span>, <span class="comment">//设置配色方案，需要搭配后面的配色方案使用</span></span><br><span class="line">    <span class="attr">"suppressApplicationTitle"</span>:<span class="literal">true</span>, <span class="comment">//启动自定义选项卡标题</span></span><br><span class="line">    <span class="attr">"fontSize"</span>: <span class="number">11</span>, <span class="comment">//字体大小</span></span><br><span class="line">    <span class="attr">"fontFace"</span>: <span class="string">"Fira Code"</span>, <span class="comment">//设置字体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体修改："><a href="#字体修改：" class="headerlink" title="字体修改："></a>字体修改：</h4><p>选择喜欢的字体下载(最好是支持PowerLine的，否则后续会出现字符渲染的问题)<br>这里以<code>Fira Code</code>字体为例<br>点击此处<a href="https://github.com/tonsky/FiraCode/releases/download/5/Fira_Code_v5.zip" target="_blank" rel="noopener">开始下载Fira Code</a><br>安装好字体后，在<code>defaults</code>属性中添加<code>&quot;fontFace&quot;: &quot;Fira Code&quot;</code>值</p><h4 id="配色方案修改"><a href="#配色方案修改" class="headerlink" title="配色方案修改:"></a>配色方案修改:</h4><p>下方网址寻找喜欢的配色方案<br><a href="https://terminalsplash.com/" target="_blank" rel="noopener">terminalsplash</a><br><a href="https://atomcorp.github.io/themes/" target="_blank" rel="noopener">atomcorp</a><br>多种配色方案，此处以第一个网址为例，进入后等待加载完毕<br>选择喜欢的配色方案，点击<code>code</code><br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/themes.png" alt="themes"><br>复制弹出的代码<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/themes-2.png" alt="themes-2"><br>粘贴至<code>配置文件</code>的<code>schemes</code>属性中<br>如</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">"schemes": [&#123;</span><br><span class="line">    "name": "Monokai Night", //配色方案名称</span><br><span class="line">    "background": "#1f1f1f",</span><br><span class="line">    "foreground": "#f8f8f8",</span><br><span class="line">    "black": "#1f1f1f",</span><br><span class="line">    "blue": "#6699df",</span><br><span class="line">    "cyan": "#e69f66",</span><br><span class="line">    "green": "#a6e22e",</span><br><span class="line">    "purple": "#ae81ff",</span><br><span class="line">    "red": "#f92672",</span><br><span class="line">    "white": "#f8f8f2",</span><br><span class="line">    "yellow": "#e6db74",</span><br><span class="line">    "brightBlack": "#75715e",</span><br><span class="line">    "brightBlue": "#66d9ef",</span><br><span class="line">    "brightCyan": "#e69f66",</span><br><span class="line">    "brightGreen": "#a6e22e",</span><br><span class="line">    "brightPurple": "#ae81ff",</span><br><span class="line">    "brightRed": "#f92672",</span><br><span class="line">    "brightWhite": "#f8f8f2",</span><br><span class="line">    "brightYellow": "#e6db74"</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>修改默认配色方案<code>colorScheme</code>属性值为自定义的配色方案名称</p><h4 id="背景修改："><a href="#背景修改：" class="headerlink" title="背景修改："></a>背景修改：</h4><ul><li>开启背景毛玻璃效果<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"acrylicOpacity": 0.25, //设置背景模糊度</span><br><span class="line">"useAcrylic": true, //开启毛玻璃效果</span><br></pre></td></tr></table></figure></li><li>设置背景图片<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"backgroundImage":"图片路径",</span><br><span class="line">"backgroundImageStretchMode":"背景拉伸", //可选属性: "none"、"fill"、"uniform"、"uniformToFill"</span><br><span class="line">"backgroundImageAlignment":"背景对齐方式",//可选属性: "center"、"left"、"top"、"right"、"bottom"、</span><br><span class="line">                                                <span class="comment">//"topLeft"、"topRight"、"bottomLeft"、"bottomRight"</span></span><br><span class="line">"backgroundImageOpacity":"背景不透明度", //0-1</span><br></pre></td></tr></table></figure></li><li>其他属性如滚动条，光标颜色等可参考<code>官方文档</code><a href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener">链接</a></li></ul><h1 id="PowerShell配置"><a href="#PowerShell配置" class="headerlink" title="PowerShell配置"></a>PowerShell配置</h1><p>新版的<code>PowerShell</code>虽然功能更新不少，但默认的操作和界面比较不耐看，此时我们便需要借助一些插件来完善他</p><h2 id="PowerShell插件配置"><a href="#PowerShell插件配置" class="headerlink" title="PowerShell插件配置"></a>PowerShell插件配置</h2><p>使用管理员身份打开<code>PowerShell</code><br>依次输入下方三个命令安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name PSReadLine -AllowPrerelease -Force </span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>然后输入以下命令来配置插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad.exe $PROFILE</span><br></pre></td></tr></table></figure><p>这会打开默认<code>PowerShell</code> 的启动配置文件，如果提示没有该文件，点击创建就好<br>在打开的文件中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 引入 posh-git</span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"># 引入 oh-my-posh</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line">#引入 PSReadLine</span><br><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line"># 设置 PowerShell 主题</span><br><span class="line">Set-Theme Paradox</span><br><span class="line"></span><br><span class="line">#设置 Tab 键补全</span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+d 为退出 PowerShell</span><br><span class="line">Set-PSReadlineKeyHandler -Key &quot;Ctrl+d&quot; -Function ViExit</span><br><span class="line"></span><br><span class="line"># 设置 Ctrl+z 为撤销</span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo</span><br><span class="line"></span><br><span class="line"># 设置向上键为后向搜索历史记录</span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"># 设置向下键为前向搜索历史纪录</span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br></pre></td></tr></table></figure><p>亦可参考<a href="https://raw.githubusercontent.com/PowerShell/PSReadLine/master/PSReadLine/SamplePSReadLineProfile.ps1" target="_blank" rel="noopener">官方样例</a>来自行修改</p><h2 id="使PowerShell支持git-bash"><a href="#使PowerShell支持git-bash" class="headerlink" title="使PowerShell支持git bash"></a>使PowerShell支持git bash</h2><p>此时修改的已经差不多了，但<code>PowerShell</code>的<code>git</code>功能仍有一些缺陷<br>我们需要修改环境变量，使<code>PowerShell</code>更上一层楼<br><img src="https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/path.png" alt="path"><br>将<code>git Bash</code>目录下的<code>usr/bin</code>路径复制进去就好了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这是我的第一篇文章，自微软<code>Bulid 2019</code>以来，宣布新的终端<code>Windows Terminal</code>，我就一直在关注，并第一时间下下来使用，那时的<code>Windows Terminal</code>充满bug，动不动就会闪退，蛋疼的操作，蛋疼的配置，让我着实没能香起来，最近<code>Bulid 2020</code>大会，微软正式推出<code>Windows Terminal 1.0</code>正式版，迫不及待下载后，一个字，香，两个字，真香，虽然还有一些小瑕疵，譬如图形化配置界面，还整json文件呢，真就人均极客了嗷。并没有使用过<code>cmder</code>、<code>Xshell</code>等第三方终端，所以以上观点仅代表个人审美。溜了溜了</p><p>顺便这篇文章的生成与发布均使用新版<code>Windows Terminal</code></p><blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><p><a href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener">微软官方文档</a><br><a href="https://blog.ichr.me/post/windows-terminal-configuration/" target="_blank" rel="noopener">如何打造好看还好用的 Windows Terminal—ChrAlpha</a><br><a href="https://sspai.com/post/52907" target="_blank" rel="noopener">5 个 PowerShell 主题，让你的 Windows 终端更好看—少数派</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;关于新版Windows-Terminal&quot;&gt;&lt;a href=&quot;#关于新版Windows-Terminal&quot; class=&quot;headerlink&quot; title=&quot;关于新版Windows Terminal&quot;&gt;&lt;/a&gt;关于新版Windows Terminal&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Windows 终端是一个面向命令行工具和 shell（如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL)）用户的新式终端应用程序。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，还可以用于创建你自己的主题并自定义文本、颜色、背景和快捷键绑定。&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/mnmnmssd/hexoBlogimg/blog/2020/wt.png&quot; alt=&quot;wt&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="美化" scheme="http://121.89.216.198/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>稍等马上回来</title>
    <link href="http://121.89.216.198/2020/05/12/%E7%A8%8D%E7%AD%89%E9%A9%AC%E4%B8%8A%E5%9B%9E%E6%9D%A5/"/>
    <id>http://121.89.216.198/2020/05/12/%E7%A8%8D%E7%AD%89%E9%A9%AC%E4%B8%8A%E5%9B%9E%E6%9D%A5/</id>
    <published>2020-05-12T10:29:47.000Z</published>
    <updated>2020-06-13T07:58:33.675Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --><h1 id="稍等，马上回来"><a href="#稍等，马上回来" class="headerlink" title="稍等，马上回来"></a>稍等，马上回来</h1><p>全力备考中</p><h2 id="考完恢复更新-以下内容"><a href="#考完恢复更新-以下内容" class="headerlink" title="考完恢复更新 以下内容"></a>考完恢复更新 以下内容</h2><blockquote><p>完成Hexo主题优化<br>每日刷leetcode<br>完成蝌蚪后台魔改<br>复习java<br>剪辑87版红楼<br>写个个人主页<br>做奈(老)绪(婆)的live2d模型<br><del>~ 通关黑魂三(白金满成就) ~</del></p></blockquote><h2 id="已完成内容"><a href="#已完成内容" class="headerlink" title="已完成内容"></a>已完成内容</h2><ul><li><input checked disabled type="checkbox"> 搭建图床(使用github搭建图床，配合vscode的PicGO插件实现上传自动返回URL)<ul><li><input disabled type="checkbox"> 待出教程</li></ul></li><li><input checked disabled type="checkbox"> 完成静态资源CDN引用(使用jsDelivr实现免费的CDN加速)<ul><li><input disabled type="checkbox"> 待出教程</li></ul></li></ul><h2 id="溜了溜了-专心备考"><a href="#溜了溜了-专心备考" class="headerlink" title="溜了溜了 专心备考"></a>溜了溜了 专心备考</h2><!-- rebuild by neat -->]]></content>
    
    
    <summary type="html">&lt;!-- build time:Tue Oct 26 2021 20:46:10 GMT+0800 (中国标准时间) --&gt;&lt;h1 id=&quot;稍等，马上回来&quot;&gt;&lt;a href=&quot;#稍等，马上回来&quot; class=&quot;headerlink&quot; title=&quot;稍等，马上回来&quot;&gt;&lt;/a&gt;稍等，马上回来&lt;/h1&gt;&lt;p&gt;全力备考中&lt;/p&gt;&lt;h2 id=&quot;考完恢复更新-以下内容&quot;&gt;&lt;a href=&quot;#考完恢复更新-以下内容&quot; class=&quot;headerlink&quot; title=&quot;考完恢复更新 以下内容&quot;&gt;&lt;/a&gt;考完恢复更新 以下内容&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
